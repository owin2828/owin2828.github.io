<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://owin2828.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://owin2828.github.io/" rel="alternate" type="text/html" /><updated>2020-01-09T11:41:07+09:00</updated><id>https://owin2828.github.io/feed.xml</id><title type="html">낮코밤코</title><subtitle>Already done, cause will do</subtitle><author><name>owin2828</name></author><entry><title type="html">[CI/CD] DevOps Full Chain - 5</title><link href="https://owin2828.github.io/devlog/2020/01/09/cicd-5.html" rel="alternate" type="text/html" title="[CI/CD] DevOps Full Chain - 5" /><published>2020-01-09T10:18:00+09:00</published><updated>2020-01-09T10:18:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/09/cicd-5</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/09/cicd-5.html">&lt;p&gt;이것은 시간 테스느&lt;/p&gt;</content><author><name>owin2828</name></author><category term="cicd" /><summary type="html">이것은 시간 테스느</summary></entry><entry><title type="html">기본 설정으로 포트 확인하기</title><link href="https://owin2828.github.io/devlog/2020/01/08/etc-1.html" rel="alternate" type="text/html" title="기본 설정으로 포트 확인하기" /><published>2020-01-08T15:17:00+09:00</published><updated>2020-01-08T15:17:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/08/etc-1</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/08/etc-1.html">&lt;h2 id=&quot;외부-서버의-포트가-살아있는지-open여부를-점검하기&quot;&gt;외부 서버의 포트가 살아있는지 open여부를 점검하기&lt;/h2&gt;
&lt;p&gt;이런 저런 이유로, 명령어들을 사용할 수 없는 경우가 존재한다.&lt;br /&gt;
나도 원격 서버가 살아있는지 점검해야 하는데, host 서버에 telnet등이 지원하지 않아 고생한 경험이 있다.&lt;br /&gt;
이러한 경우를 대비해, 서버와 통신이 되는지 확인하는 명령어를 종류에 따라 정리해 보았다.&lt;br /&gt;
다음은 지극히 &lt;code class=&quot;highlighter-rouge&quot;&gt;주관적인&lt;/code&gt; (쉬운?) 순서대로 방법이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-ping&quot;&gt;1. Ping&lt;/h4&gt;
&lt;p&gt;포트고 뭐고 필요 없을 때&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt;은 port를 &lt;code class=&quot;highlighter-rouge&quot;&gt;사용하지 않는다&lt;/code&gt;.&lt;br /&gt;
이유는 TCP/IP 계층에서 사용되고, port가 사용되는 상위 계층인 TCP/UDP 와는 상관이 없기 때문이다.&lt;br /&gt;
즉, ping으로는 port 확인이 &lt;code class=&quot;highlighter-rouge&quot;&gt;불가능&lt;/code&gt;하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ping &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP]

// 예시
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ping 8.8.8.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-telnet&quot;&gt;2. Telnet&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;특정&lt;/code&gt; port를 확인해야 할 경우&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;telnet &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PORT]  

// 예시
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;telnet 100.1.1.1 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-ncnetcat&quot;&gt;3. nc(NetCat)&lt;/h4&gt;
&lt;p&gt;일반적으로 UNIX의 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;명령과 비슷한 사용법 이지만, 대상이 파일이 아니라 network connection이다.&lt;br /&gt;
포트 확인 기능 말고도 다양한 기능으로 사용이 된다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PORT]

// 예시
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; 100.1.1.1 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-curl&quot;&gt;4. curl&lt;/h4&gt;
&lt;p&gt;대부분 서버는 telnet이 설치되어 있지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;보안&lt;/code&gt;이슈나 &lt;code class=&quot;highlighter-rouge&quot;&gt;최소 설치&lt;/code&gt;를 한 경우 사용이 불가능한 경우가 있다.&lt;br /&gt;
그런 경우 다음의 명령을 사용하자. 아무리 최소 설치를 해도 curl은 설치되어 있기 때문이다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;의 parameter중 URL telnet 스키마를 사용하여 서버 통신 확인&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; telnet://[IP]:PORT  

// 예시
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; telnet://100.1.1.1:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-bash&quot;&gt;5. bash&lt;/h4&gt;
&lt;p&gt;약간 하드한 방법이다. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;에 익숙하지 않은 사람들은 4번에서 끝내기를 권장한다.&lt;br /&gt;
TCP 연결을 간단하게 bash의 내장된 기능으로 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;5 bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cat &amp;lt; /dev/null &amp;gt; /dev/tcp/[IP]/[PORT]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;

// 예시
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;5 bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cat &amp;lt; /dev/null &amp;gt; /dev/tcp/100.1.1.1/8080'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
// 결과
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;0   // 성공 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;1   // 실패 연결 전 에러&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hostname &lt;/span&gt;not known등 오류&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;124 // 실패 Timeout 에러
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $?&lt;/code&gt;는 UNIX에서 바로 전 실행의 결과를 보여주는 명령어이다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>owin2828</name></author><category term="etc" /><summary type="html">외부 서버의 포트가 살아있는지 open여부를 점검하기 이런 저런 이유로, 명령어들을 사용할 수 없는 경우가 존재한다. 나도 원격 서버가 살아있는지 점검해야 하는데, host 서버에 telnet등이 지원하지 않아 고생한 경험이 있다. 이러한 경우를 대비해, 서버와 통신이 되는지 확인하는 명령어를 종류에 따라 정리해 보았다. 다음은 지극히 주관적인 (쉬운?) 순서대로 방법이다.</summary></entry><entry><title type="html">[CI/CD] DevOps Full Chain - 4</title><link href="https://owin2828.github.io/devlog/2020/01/08/cicd-4.html" rel="alternate" type="text/html" title="[CI/CD] DevOps Full Chain - 4" /><published>2020-01-08T14:12:00+09:00</published><updated>2020-01-08T14:12:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/08/cicd-4</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/08/cicd-4.html">&lt;h2 id=&quot;드디어&quot;&gt;드디어&lt;/h2&gt;
&lt;p&gt;CI/CD까지 도착하여 포스팅을 하게 되었다.&lt;br /&gt;
긴 시간이었고, 나 또한 그동안 배우고 겪었던 것들을 글로 풀어내느라 시간을 꽤 썼다.&lt;br /&gt;
인터넷을 찾아보면 CI/CD에 관련된 수 많은 자료가 나오므로, 자세한 설명보다는 내가 배우고 느낀대로 적어보겠다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;p&gt;CI/CD라는 단어를 사용하기 전에 우리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;왜&lt;/code&gt; CI/CD를 적용해야 하는가를 생각해야 한다.&lt;br /&gt;
앞선 글 &lt;a href=&quot;https://owin2828.github.io/devlog/2020/01/07/cicd-1.html&quot;&gt;DevOps란 무엇인가?&lt;/a&gt;에서 설명했듯이,&lt;br /&gt;
고객에게 가치를 빠르고 안정적으로 전달하는 것이 DevOps의 목적이고, 이를 위해 CI/CD를 활용하는 것이다.&lt;/p&gt;

&lt;p&gt;더 상세한 설명을 하기 전에,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;지속적인 통합&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;자동화&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;CD&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;지속적인 배포&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;자동화&lt;/code&gt;&lt;br /&gt;
개발 -&amp;gt; CI -&amp;gt; CD 순으로 Flow가 진행됨을 먼저 알고가면 좋을 것 같다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ci--cd&quot;&gt;CI / CD&lt;/h2&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/cicd/cicd_4_1.png&quot; alt=&quot;CI/CD&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;출처: &lt;a href=&quot;https://dzone.com/articles/the-complete-introduction-to-cicd-1&quot;&gt;https://dzone.com/articles/the-complete-introduction-to-cicd-1&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;인터넷을 찾아보면 수 많은 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI/CD&lt;/code&gt; pipe-line 관련 이미지가 나온다.&lt;br /&gt;
그 중 위 이미지는 가장 간략하고 정확하게 CI/CD의 개요에 대해 설명하는 그림인것 같아 가져와봤다.&lt;/p&gt;

&lt;p&gt;이 중, 개발자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;혼자서&lt;/code&gt; 진행하는 부분은 CI, CD 파이프라인 중 어디에도 속하지 않는다.&lt;br /&gt;
다시 말해서 CI/CD의 파이프라인을 태운다는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;협업&lt;/code&gt;을 기반으로 한다는 의미이다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;물론 규모가 작아 혼자서도 CI/CD 파이프 라인을 구축할 수도 있다.&lt;br /&gt;
하지만 CI/CD 파이프라인의 극적인 효율은 협업을 할 때 나오게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;ci--continuous-integration&quot;&gt;CI = Continuous Integration&lt;/h5&gt;
&lt;p&gt;CI는 개발자들의 코드를 지속적, 자동적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드&lt;/code&gt;하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;단위테스트&lt;/code&gt;를 거치며, &lt;code class=&quot;highlighter-rouge&quot;&gt;통합테스트&lt;/code&gt;를 하는 과정이다.&lt;br /&gt;
CI의 파이프라인이 구축되어 있지 않은 극적인 상황을 생각해 보자.&lt;/p&gt;

&lt;p&gt;10명의 개발자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;각자&lt;/code&gt; 빌드 후, 유닛테스트를 하고 통합테스트를 진행한다.&lt;br /&gt;
문제는 &lt;code class=&quot;highlighter-rouge&quot;&gt;단위테스트&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;통합테스트&lt;/code&gt;를 하는 시점이 모두에게 동일하고 명확하게 정의되기가 어렵다는 점이다.&lt;br /&gt;
만약, 10명의 개발자가 각자 개발 후 통합테스트를 한 번에 진행한다면…?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;상상은 각자의 몫이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt;를 적용해서 각 개발자들 간의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ground Rule&lt;/code&gt;을 다음과 같이 세웠다고 생각해보자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 개발자들은 퇴근 전 각자의 코드를 Main 코드와 통합한다.&lt;/li&gt;
  &lt;li&gt;각자의 코드가 잘 동작하는지 테스트한다.&lt;/li&gt;
  &lt;li&gt;통합테스트를 진행한다.&lt;/li&gt;
  &lt;li&gt;버그가 발견된다면, To-Do 목록에 작성하고 다음 날 업무를 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CI를 적용하기 전 상황보다는 효율적이고 소스코드의 관리도 훨씬 잘 될 것이다.&lt;br /&gt;
하지만 글을 쓰면서도 위의 모든 과정이 너무나도 &lt;code class=&quot;highlighter-rouge&quot;&gt;귀찮다&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;당신이 개발자라면 위와 같은 과정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;수작업&lt;/code&gt;으로 하겠는가?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;누군가가 나 대신 빌드와 테스트들을 해주고 버그를 기록해준다면 얼마나 좋을까.&lt;br /&gt;
그래서 CI/CD 파이프라인에는 필연적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;자동화&lt;/code&gt;가 포함이 된다.&lt;br /&gt;
자동화가 적용된 위의 WorkFlow는 다음과 같이 간소화 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;퇴근 전 각자의 코드를 Main 코드와 통합한다.&lt;/li&gt;
  &lt;li&gt;다음날 출근 후, 버그 리포팅을 기반으로 코드를 수정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발자들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;게을러야&lt;/code&gt; 하는 이유가 단적으로 드러나지 않는가?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;cd--continuous-deploydelivery&quot;&gt;CD = Continuous Deploy/Delivery&lt;/h5&gt;
&lt;p&gt;CD는 개발된 SW가 배포되는 시점에 신뢰할 수 있는 수준을 유지하도록 지속적으로 관리하는 것이다.&lt;br /&gt;
CI의 &lt;code class=&quot;highlighter-rouge&quot;&gt;연장선&lt;/code&gt;상에 있으며, 이상적으로는 CI가 지속적/자동적으로 이루어진다면,&lt;br /&gt;
CD 또한 지속적/자동적으로 이루어질 수밖에 없다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;실제로 CI/CD 파이프 라인을 구축해서 배포를 해본다면, 얼마나 효율적인지 알 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;이론은&quot;&gt;이론은&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;별거없다&lt;/code&gt;. CI/CD의 등장배경과 특징 및 장점을 살펴보았지만, 이해하기 어려운 개념은 아니다.&lt;br /&gt;
하지만 실제로 CI/CD 자동화 파이프라인을 구축하기 위해서는 많은 &lt;code class=&quot;highlighter-rouge&quot;&gt;삽질&lt;/code&gt;이 필요하다.&lt;br /&gt;
어떤 프로세스를 언제 어떻게 적용하고, 결과는 어떤 방법으로 처리할지 등이 고려되어야 한다.&lt;/p&gt;

&lt;p&gt;바닥부터 구축하라고하면 차라리 안하는게 나을수도 있지만, 역시 누군가가 만들어놓은 솔루션이 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Jenkins&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CircleCI&lt;/code&gt; 등이 있고 각 솔루션의 장단점을 분석한 후에 단계별 Stage의 tool들을 살펴보러가겠다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/the-complete-introduction-to-cicd-1&quot;&gt;https://dzone.com/articles/the-complete-introduction-to-cicd-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/devops/what-is-ci-cd&quot;&gt;https://www.redhat.com/ko/topics/devops/what-is-ci-cd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itholic.github.io/qa-cicd/&quot;&gt;https://itholic.github.io/qa-cicd/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="cicd" /><summary type="html">드디어 CI/CD까지 도착하여 포스팅을 하게 되었다. 긴 시간이었고, 나 또한 그동안 배우고 겪었던 것들을 글로 풀어내느라 시간을 꽤 썼다. 인터넷을 찾아보면 CI/CD에 관련된 수 많은 자료가 나오므로, 자세한 설명보다는 내가 배우고 느낀대로 적어보겠다.</summary></entry><entry><title type="html">[CI/CD] DevOps Full Chain - 3</title><link href="https://owin2828.github.io/devlog/2020/01/07/cicd-3.html" rel="alternate" type="text/html" title="[CI/CD] DevOps Full Chain - 3" /><published>2020-01-07T16:03:00+09:00</published><updated>2020-01-07T16:03:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/07/cicd-3</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/07/cicd-3.html">&lt;h2 id=&quot;scrum이란&quot;&gt;Scrum이란&lt;/h2&gt;
&lt;p&gt;Scrum은 그 자체로 하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;방법론&lt;/code&gt;이자, Agile의 &lt;code class=&quot;highlighter-rouge&quot;&gt;실천 도구&lt;/code&gt; 중 하나이다.&lt;br /&gt;
이 말은, Agile로부터 Scrum이 등장한 것이 아니라는 이야기이다.&lt;br /&gt;
다른 실천 도구들(칸반, XP - extreme programming, 린SW개발)등은 Agile이라는 용어 정의 전에 이미 여러 형태로 존재하였다.&lt;br /&gt;
이후  Agile 선언문이 발표되며 이러한 방법들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Agile&lt;/code&gt; 이라는 깃발 아래 모여들었고, 그 중 우리에게 익숙한 것이 Scrum이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;결국 스크럼은 &lt;code class=&quot;highlighter-rouge&quot;&gt;작은&lt;/code&gt; 개발팀, &lt;code class=&quot;highlighter-rouge&quot;&gt;짧은&lt;/code&gt; 개발 주기 및 팀원들의 &lt;code class=&quot;highlighter-rouge&quot;&gt;생산성&lt;/code&gt;을 유지시켜 SW개발을 하는 대표적인 Agile 방법론이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scrum의-특징&quot;&gt;Scrum의 특징&lt;/h2&gt;
&lt;p&gt;다음 특징들로 Scrum을 정의할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트 관리: &lt;code class=&quot;highlighter-rouge&quot;&gt;역할&lt;/code&gt;, 정의에 중점&lt;/li&gt;
  &lt;li&gt;시간 설정: &lt;code class=&quot;highlighter-rouge&quot;&gt;15분&lt;/code&gt;의 Daily Meeting, 1~4주 정도의 개발주기&lt;/li&gt;
  &lt;li&gt;관리체계: &lt;code class=&quot;highlighter-rouge&quot;&gt;요구사항(BackLog)&lt;/code&gt;관리, 업무 진행 가시화&lt;/li&gt;
  &lt;li&gt;팀 중심: &lt;code class=&quot;highlighter-rouge&quot;&gt;5~9명&lt;/code&gt;으로 팀 구성, 본인 task보다 급한 task를 &lt;code class=&quot;highlighter-rouge&quot;&gt;우선&lt;/code&gt;시&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이러한 특성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;유연하게&lt;/code&gt; 개발하기에 최적화 되어있는데, 특히 팀원의 수는 피자 한 판을 시켰을 때 나눠먹기 좋은 인원이라고 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;스크럼의-5가지-가치&quot;&gt;스크럼의 5가지 가치&lt;/h2&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/cicd/cicd_3_1.png&quot; alt=&quot;스크럼가치&quot; width=&quot;85%&quot; height=&quot;85%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;출처: &lt;a href=&quot;https://www.scrum.org/resources/blog/5-scrum-values-take-center-stage&quot;&gt;https://www.scrum.org/resources/blog/5-scrum-values-take-center-stage&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;항상 이러한 가치를 볼 때 손과 발이 없어지는 경험을 하지만, 그래도 정의해 보도록 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Courage(용기): &lt;code class=&quot;highlighter-rouge&quot;&gt;갈등&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;도전&lt;/code&gt;을 통해 일을 할 수 있는 용기&lt;/li&gt;
  &lt;li&gt;Focus(집중): 모두가 스프린트동안 &lt;code class=&quot;highlighter-rouge&quot;&gt;같은&lt;/code&gt; 목표를 향해 나아가는 것&lt;/li&gt;
  &lt;li&gt;Commitment(확약): 세운 목표를 &lt;code class=&quot;highlighter-rouge&quot;&gt;실행&lt;/code&gt;하는 것&lt;/li&gt;
  &lt;li&gt;Respect(존중): 팀원간 다른 객체임을 인정하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;존중&lt;/code&gt;하는 것&lt;/li&gt;
  &lt;li&gt;Openess(정직): 업무상태를 &lt;code class=&quot;highlighter-rouge&quot;&gt;공개&lt;/code&gt;하고, 일의 효율성을 높이는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;일할 때 기본적으로 너무 당연한 자세 아닌가 싶지만, 실제로 스크럼을 해보면…&lt;br /&gt;
특히 한국인의 수직적인 정서상, 팀원 간의 &lt;code class=&quot;highlighter-rouge&quot;&gt;존중&lt;/code&gt;이 가장 어려운부분인것 같다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scrum-process&quot;&gt;Scrum Process&lt;/h2&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/cicd/cicd_3_2.jpg&quot; alt=&quot;스크럼프로세스&quot; width=&quot;85%&quot; height=&quot;85%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;출처: &lt;a href=&quot;https://brainhub.eu/blog/differences-lean-agile-scrum/&quot;&gt;https://brainhub.eu/blog/differences-lean-agile-scrum/&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Scrum 진행은 Broduct Backlog에서 한 Sprint에 수행할 작업들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;도출&lt;/code&gt;한 뒤, 
매일 이루어지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Daily scrum&lt;/code&gt;을 통해 팀원들의 업무 진척 상황을 공유하고 필요시 &lt;code class=&quot;highlighter-rouge&quot;&gt;지원&lt;/code&gt;을 하는 방식으로 이루어진다.&lt;br /&gt;
해당 Sprint가 끝나면 Sprint &lt;code class=&quot;highlighter-rouge&quot;&gt;리뷰&lt;/code&gt;를 통해 다음 Sprint의 완급을 조절하며 이 과정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;반복&lt;/code&gt;한다.&lt;/p&gt;

&lt;p&gt;각 단계별 &lt;code class=&quot;highlighter-rouge&quot;&gt;구성요소&lt;/code&gt;는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Product Backlog: &lt;code class=&quot;highlighter-rouge&quot;&gt;전체&lt;/code&gt; 기간동안 개발해야하는 기능, 특성 및 기술에 대한 나열. 요구사항의 &lt;code class=&quot;highlighter-rouge&quot;&gt;우선순위&lt;/code&gt; 나열 필수&lt;/li&gt;
  &lt;li&gt;Sprint Planning Meeting: 해당 스프린트의 기간, 수행해야할 목록등 해당 스프린트 &lt;code class=&quot;highlighter-rouge&quot;&gt;계획&lt;/code&gt; 수립&lt;/li&gt;
  &lt;li&gt;Sprint Backlog: 해당 Sprint 기간 동안 수행하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Task 목록&lt;/code&gt;. Product Backlog에서 우선순위순으로 선택&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scrum에서는 각 구성원이 주어진 역할을 잘 해내는것이 중요한데, 구성원들은 다음의 역할 중 하나를 따르게 된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Product Owner(PO):
    &lt;ul&gt;
      &lt;li&gt;고객, 관리자 및 팀원 간의 합의를 도출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;목표&lt;/code&gt; 설정&lt;/li&gt;
      &lt;li&gt;요구사항 정의, Product Backlog 간의 &lt;code class=&quot;highlighter-rouge&quot;&gt;우선순위&lt;/code&gt; 조정&lt;/li&gt;
      &lt;li&gt;Product Backlog &lt;code class=&quot;highlighter-rouge&quot;&gt;업데이트&lt;/code&gt; 수행&lt;/li&gt;
      &lt;li&gt;제품을 사용할 고객이 &lt;code class=&quot;highlighter-rouge&quot;&gt;직접&lt;/code&gt; 하거나, 비지니스 요구사항을 &lt;code class=&quot;highlighter-rouge&quot;&gt;정의&lt;/code&gt;할 수 있는 사람&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scrum Master(SM):
    &lt;ul&gt;
      &lt;li&gt;팀원들이 Scrum을 올바르게 할 수 있도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;가이드&lt;/code&gt;하는 역할&lt;/li&gt;
      &lt;li&gt;최대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;객관적인&lt;/code&gt; 시각에서 Scrum의 원칙이 잘 적용될 수 있도록 도움&lt;/li&gt;
      &lt;li&gt;문제 발생시, &lt;code class=&quot;highlighter-rouge&quot;&gt;해결&lt;/code&gt;하는 역할&lt;/li&gt;
      &lt;li&gt;일이 끝났을 때, 잘 끝났는지 확인&lt;/li&gt;
      &lt;li&gt;직책에 &lt;code class=&quot;highlighter-rouge&quot;&gt;상관없이&lt;/code&gt; 수행 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scrum Team:
    &lt;ul&gt;
      &lt;li&gt;Backlog에 따라 Sprint 동안 개발하는 팀원&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cross-functional&lt;/code&gt;한 롤을 가진 팀원들로 구성(개발자, 디자이너, 설계자 등)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그 외 산출물로써는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Burn Down Chart&lt;/code&gt;가 존재하며, 각 Task별로 작업량을 측정한 뒤 작업량의 총 합에서 완료한 Task들의 작업량을 빼가며 
그래프의 하강 기울기를 통해 다음 Sprint의 진행을 조절한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기존의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Top-Down&lt;/code&gt;방식과는 달리 Scrum에는 PM과 같은 직책이 존재하지 않는다.&lt;br /&gt;
그저 서로간의 &lt;code class=&quot;highlighter-rouge&quot;&gt;존중&lt;/code&gt;을 바탕으로 팀원간의 소통과 협업을 최대로 이끌어내며 일하는 것이 목표이며,&lt;br /&gt;
Scrum Master는 권력자나 리더가 아니라 그저 &lt;code class=&quot;highlighter-rouge&quot;&gt;조력자&lt;/code&gt;에 불과한 직책으로 늘 팀원들에게 귀기울이며 의견을 들어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;또한, 실제로 Scrum을 하다보면 Daily meeting이 서로 간의 감시와 업무 보고의 연장선이라고 느낄 수 있다.&lt;br /&gt;
하지만 Scrum Master가 팀원들을 강압적으로 압박하지 않고, Daily meeting의 목적이 &lt;code class=&quot;highlighter-rouge&quot;&gt;우선순위&lt;/code&gt;에 따라 Task를 수행하며 
우선순위가 높은 Task에 &lt;code class=&quot;highlighter-rouge&quot;&gt;도움&lt;/code&gt;이 필요하다면, 자발적으로 팀원들이 본인의 Task를 제쳐두고 도움을 주는 것임을 팀원들이 숙지하도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;도와주는&lt;/code&gt; 것이 중요하다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@insuk/13&quot;&gt;https://brunch.co.kr/@insuk/13&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://needjarvis.tistory.com/317&quot;&gt;https://needjarvis.tistory.com/317&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="cicd" /><summary type="html">Scrum이란 Scrum은 그 자체로 하나의 방법론이자, Agile의 실천 도구 중 하나이다. 이 말은, Agile로부터 Scrum이 등장한 것이 아니라는 이야기이다. 다른 실천 도구들(칸반, XP - extreme programming, 린SW개발)등은 Agile이라는 용어 정의 전에 이미 여러 형태로 존재하였다. 이후 Agile 선언문이 발표되며 이러한 방법들이 Agile 이라는 깃발 아래 모여들었고, 그 중 우리에게 익숙한 것이 Scrum이다.</summary></entry><entry><title type="html">[CI/CD] DevOps Full Chain - 1</title><link href="https://owin2828.github.io/devlog/2020/01/07/cicd-1.html" rel="alternate" type="text/html" title="[CI/CD] DevOps Full Chain - 1" /><published>2020-01-07T10:31:00+09:00</published><updated>2020-01-07T10:31:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/07/cicd-1</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/07/cicd-1.html">&lt;p&gt;&lt;img src=&quot;/img/cicd/cicd_1_1.png&quot; alt=&quot;DevOps&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;devops-등장배경&quot;&gt;DevOps 등장배경&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;DevOps = &lt;code class=&quot;highlighter-rouge&quot;&gt;Development&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Operations&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하나의 소프트웨어를 개발하기 위해 여러 개발자가 동시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;협업&lt;/code&gt;하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;빠르게&lt;/code&gt; 개발할 수 있는 환경이 필요하며, 
수많은 사용자를 상대로 서비스를 오픈하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;안정적인&lt;/code&gt; 인프라가 필요하다.&lt;br /&gt;
이러한 모순되는 두 가지, &lt;code class=&quot;highlighter-rouge&quot;&gt;신속함&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;안정성&lt;/code&gt;에서 개발자와 운영자간의 &lt;code class=&quot;highlighter-rouge&quot;&gt;충돌&lt;/code&gt;이 발생하게 된다.&lt;/p&gt;

&lt;p&gt;이러한 배경에서 등장하게 된 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;DevOps&lt;/code&gt;이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;자동화&lt;/code&gt;를 핵심으로 두 역할 간의 간극을 좁히게 해주며,&lt;br /&gt;
업무와 정보 또한 쉽게 공유하게 해준다. 더이상 통합 빌드를 특정 시점에 진행하는 것이 아니라,&lt;br /&gt;
주기적으로 수행하며 오류를 사전에 방지하고 시간을 단축한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;devops-핵심요소&quot;&gt;DevOps 핵심요소&lt;/h2&gt;
&lt;p&gt;DevOps의 핵심요소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CALMS&lt;/code&gt;로 다음과 같은 5가지 요소로 이루어져있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Culture(문화)&lt;/li&gt;
  &lt;li&gt;Automation(자동화)&lt;/li&gt;
  &lt;li&gt;Lean(간소화)&lt;/li&gt;
  &lt;li&gt;Measurement(측정)&lt;/li&gt;
  &lt;li&gt;Share(공유)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;culture문화&quot;&gt;Culture(문화)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;DevOps 문화 = &lt;code class=&quot;highlighter-rouge&quot;&gt;협업&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DevOps의 문화는 도구의 문제가 아니라, 사람 간의 문제를 해결하기 위해 등장했다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;automation자동화&quot;&gt;Automation(자동화)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;개발, 테스트 및 배포의 &lt;code class=&quot;highlighter-rouge&quot;&gt;핵심&lt;/code&gt;요소&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자동화를 통해 막대한 이익을 얻을 수 있으며, 이는 곧 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI(지속적인 통합)&lt;/code&gt;과  &lt;code class=&quot;highlighter-rouge&quot;&gt;CD(지속적인 배포)&lt;/code&gt;로 구성된다.&lt;br /&gt;
또한 개발자와 운영자가 서로 업데이트한 내용을 자동화하여 확인함으로써, 즉각적인 소통을 가능하게 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;lean간소화&quot;&gt;Lean(간소화)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;낭비를 &lt;code class=&quot;highlighter-rouge&quot;&gt;제거&lt;/code&gt;하고 고객에게 가치를 &lt;code class=&quot;highlighter-rouge&quot;&gt;빠르게&lt;/code&gt; 전달&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;끊임없이 문제를 찾고, 해결하고, 개선하는 사고방식을 의미한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;measurement측정&quot;&gt;Measurement(측정)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;여러가지를 &lt;code class=&quot;highlighter-rouge&quot;&gt;측정&lt;/code&gt;하고, 측정 결과를 &lt;code class=&quot;highlighter-rouge&quot;&gt;가시화&lt;/code&gt;하여 보여줌&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;실질적인 데이터를 가시화하여 제공하므로써, 지속적인 개선을 향한 노력이 실제 개선으로 나아가는지 확인 가능하다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;share공유&quot;&gt;Share(공유)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;성공 여부와 상관없이 서로의 &lt;code class=&quot;highlighter-rouge&quot;&gt;경험&lt;/code&gt;을 공유&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;서로 경험을 공유함으로써, 마찰을 줄이고 서로 간의 경계를 허무는 발판이 된다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/ko/devops&quot;&gt;https://www.atlassian.com/ko/devops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/devops#?&quot;&gt;https://www.redhat.com/ko/topics/devops#?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devops.com/using-calms-to-assess-organizations-devops/&quot;&gt;https://devops.com/using-calms-to-assess-organizations-devops/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="cicd" /><summary type="html"></summary></entry><entry><title type="html">[CI/CD] DevOps Full Chain - 2</title><link href="https://owin2828.github.io/devlog/2020/01/07/cicd-2.html" rel="alternate" type="text/html" title="[CI/CD] DevOps Full Chain - 2" /><published>2020-01-07T10:31:00+09:00</published><updated>2020-01-07T10:31:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/07/cicd-2</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/07/cicd-2.html">&lt;h2 id=&quot;agile&quot;&gt;Agile&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Agile: 날렵한, &lt;code class=&quot;highlighter-rouge&quot;&gt;민첩한&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agile의 사전적 의미는 위와 같다.&lt;br /&gt;
그 중, 나는 후자에 가까운 의미가 더 어울린다는 생각이 든다.&lt;br /&gt;
민첩하게 무언가를 한다는 것은 고객에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;빠르게&lt;/code&gt; 가치를 전달하는 요즘 개발의 방식과 잘 맞기 때문이다.&lt;/p&gt;

&lt;p&gt;결국 &lt;code class=&quot;highlighter-rouge&quot;&gt;Agile&lt;/code&gt;은 하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;방법론&lt;/code&gt;이다. 민첩하게 개발을 하기 위한 방법론.&lt;br /&gt;
그렇다면 왜 항상 Agile은 DevOps와 함께 거론되며, 어떠한 배경이 있었기에 새로운 방법론이 나오게 되었는지 알아보도록 하자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;기존에는-무엇이-문제였는가&quot;&gt;기존에는 무엇이 문제였는가?&lt;/h2&gt;
&lt;p&gt;늘 새로운 것이 나오는 이유는, 기존에 존재하던 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;현 상황&lt;/code&gt;에 잘 맞지 않기 때문이라 생각한다.&lt;br /&gt;
그렇다면 이 전에 존재하던 방법론은 무엇이었길래 문제였는가?&lt;/p&gt;

&lt;p&gt;답은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Waterfall&lt;/code&gt; 이라 불리는 일명 ‘폭포수모델’은 개발 생태계를 지배하던 방법론이었다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;계획수립 - 요구분석 - 설계 - 개발 - 테스트 - 배포&lt;/code&gt;의 과정을 거치는 이 방법론은 다음과 같은 장점으로 오랫동안 생태계에 군림했다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;적용사례가 풍부&lt;/li&gt;
  &lt;li&gt;전체 /현재 과정의 이해가 쉬움&lt;/li&gt;
  &lt;li&gt;문서의 관리가 쉬움&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 중, 1번 장점은 생각 외로 정말 큰 &lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt;이다.&lt;br /&gt;
프로젝트의 크기가 크지 않고, 새로운 방법으로 도전할 리소스가 안된다면 충분히 재고할 가치가 있는 것이다.&lt;/p&gt;

&lt;p&gt;하지만 이러한 방법은 치명적인 단점을 안고 있는데, 바로 개발이&lt;code class=&quot;highlighter-rouge&quot;&gt;병행&lt;/code&gt;되거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;반대로&lt;/code&gt; 진행되지 않는다는 것이다.&lt;br /&gt;
시장의 변화속도가 매우 빠르고, 다양한 요구사항이 등장하는 현대에는 적용하기 어려운 방법이기 때문이다.&lt;br /&gt;
더이상 테스트 중에 요구사항이 변경되어 처음부터 다시 시작해야하는 방법으로는 한계에 봉착한 사람들은 새로운 방법을 몰색하였고, 
그 결과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Agile&lt;/code&gt;이 등장하게 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;하지만 나는 늘 무조건 새로운 것이, 트렌디한 것이 정답은 &lt;code class=&quot;highlighter-rouge&quot;&gt;아니며&lt;/code&gt;,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;상황에 맞는&lt;/code&gt; 방법을 잘 가져다가 쓰는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;훌륭한 선택&lt;/code&gt;이고 &lt;code class=&quot;highlighter-rouge&quot;&gt;좋은 결과&lt;/code&gt;를 도출할 확률이 높다고 생각한다.&lt;br /&gt;
waterfall도 요구사항이 &lt;code class=&quot;highlighter-rouge&quot;&gt;단순&lt;/code&gt;하고 변경 가능성이 &lt;code class=&quot;highlighter-rouge&quot;&gt;적거나&lt;/code&gt;, 프로젝트의 규모와 난이도가 &lt;code class=&quot;highlighter-rouge&quot;&gt;낮다면&lt;/code&gt; 충분히 고려할 만한 방법이라는 뜻이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;그래서-agile은&quot;&gt;그래서 Agile은&lt;/h2&gt;
&lt;p&gt;단어 그대로 민첩한 개발에 중점을 두고 있다.&lt;br /&gt;
큰 계획을 수립하지 않고 주어진 요구 사항을 &lt;code class=&quot;highlighter-rouge&quot;&gt;스프린트&lt;/code&gt;에 맞춰 작은 단위로 &lt;code class=&quot;highlighter-rouge&quot;&gt;유연&lt;/code&gt;하게 개발하는 방식이다.&lt;br /&gt;
인터넷을 찾다보면 여러가지 어려운 말로 Agile을 설명하지만 결국 나는 하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;문화&lt;/code&gt;라고 생각한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;빠르고 유연하게 개발하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;문화&lt;/code&gt;. 이 이상으로 Agile한 것이 무엇이 있을까&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;스프린트는&quot;&gt;스프린트는&lt;/h2&gt;
&lt;p&gt;다음과 같은 과정으로 이루어 진다.&lt;br /&gt;
&lt;img src=&quot;/img/cicd/cicd_2_1.jpg&quot; alt=&quot;스프린트&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;고객의 피드백&lt;/li&gt;
  &lt;li&gt;다양한 방법(스크럼등)을 통해 스프린트 목표 설정&lt;/li&gt;
  &lt;li&gt;스프린트 진행&lt;/li&gt;
  &lt;li&gt;배포&lt;/li&gt;
  &lt;li&gt;1로 복귀
    &lt;blockquote&gt;
      &lt;p&gt;피드백을 받으며 지속적으로 배포하는 스프린트를 여러 번 진행하여 개발하는 것이 Agile 이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;우리도-agile하게-일해봐야지&quot;&gt;우리도 Agile하게 일해봐야지&lt;/h2&gt;
&lt;p&gt;라는 생각은 &lt;code class=&quot;highlighter-rouge&quot;&gt;충분히&lt;/code&gt; 고려를 한 후, 적용하는 것이 좋다.&lt;br /&gt;
위에서도 언급했지만, 늘 Agile이 정답은 아니다.&lt;br /&gt;
많은 준비를 마친 후에 비로소 걸어가야 한다고 생각한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그래서-devops와-agile은&quot;&gt;그래서 DevOps와 Agile은&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;연장선&lt;/code&gt;상에 있다고 생각한다.&lt;br /&gt;
Agile의 목표가 빠른 소비자 피드백을 기반하여 개발을 진행 한다면,&lt;br /&gt;
DevOps는 개발자와 운영자의 간극을 좁혀 더욱 민첩한 개발 &amp;amp; 배포가 가능하기 때문이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.sonim1.com/238&quot;&gt;https://blog.sonim1.com/238&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sangheum.com/149&quot;&gt;https://www.sangheum.com/149&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="cicd" /><summary type="html">Agile Agile: 날렵한, 민첩한</summary></entry><entry><title type="html">[CI/CD] DevOps Full Chain - 0</title><link href="https://owin2828.github.io/devlog/2020/01/07/cicd-0.html" rel="alternate" type="text/html" title="[CI/CD] DevOps Full Chain - 0" /><published>2020-01-07T09:41:00+09:00</published><updated>2020-01-07T09:41:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/07/cicd-0</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/07/cicd-0.html">&lt;h4 id=&quot;개발을-하다-보면&quot;&gt;개발을 하다 보면&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DevOps&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Agile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CI/CD&lt;/code&gt;와 같은 이야기들이 여기저기서 들린지 꽤 되었다.&lt;br /&gt;
사실 이러한 단어와 개념들이 나온지는 오래되었지만, 우리나라에서 적용되고 진행된지는 몇 년 안된 것 같다.&lt;br /&gt;
들어는 보았지만 각 용어에 대한 지식이 얕기에, 이번 기회에 본 시리즈를 포스팅하며 학습할 예정이다.&lt;/p&gt;

&lt;h4 id=&quot;나는&quot;&gt;나는&lt;/h4&gt;
&lt;p&gt;새로운 개념을 익힐 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;terminology(용어)&lt;/code&gt;를 굉장히 중요하게 생각하는 편이다.&lt;br /&gt;
약간 꼰대같이 들릴 수도 있지만, 단어를 먼저 이해하는 것이 지식의 본질에 접근하는 가장 &lt;code class=&quot;highlighter-rouge&quot;&gt;정직&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;빠른&lt;/code&gt; 길이라고 느껴지기 때문이다.&lt;br /&gt;
이러한 관점에서, 새로운 단어의 의미를 알기 위해서는 그 단어가 나오게 된 &lt;code class=&quot;highlighter-rouge&quot;&gt;배경&lt;/code&gt;을 아는 것이 이해를 위한 첫 걸음이라 생각하며 포스팅을 시작하고자 한다.&lt;/p&gt;

&lt;h4 id=&quot;앞으로&quot;&gt;앞으로&lt;/h4&gt;
&lt;p&gt;이어지게 될 CI/CD 포스팅 시리즈는 각 개념에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;정의&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;등장배경&lt;/code&gt;을 포스팅하며, 크게 다음과 같은 내용을 다룰 예정이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DevOps&lt;/li&gt;
  &lt;li&gt;Agile&lt;/li&gt;
  &lt;li&gt;CI/CD와 각 stage별 플랫폼&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;여전히&quot;&gt;여전히&lt;/h4&gt;
&lt;p&gt;부족한 것이 많아 본 시리즈를 포스팅하면서도, 틀린 부분이 있을 수 있으니 언제든 피드백은 환영합니다.&lt;/p&gt;</content><author><name>owin2828</name></author><category term="cicd" /><summary type="html">개발을 하다 보면 DevOps, Agile, CI/CD와 같은 이야기들이 여기저기서 들린지 꽤 되었다. 사실 이러한 단어와 개념들이 나온지는 오래되었지만, 우리나라에서 적용되고 진행된지는 몇 년 안된 것 같다. 들어는 보았지만 각 용어에 대한 지식이 얕기에, 이번 기회에 본 시리즈를 포스팅하며 학습할 예정이다.</summary></entry><entry><title type="html">[Web] JSTL &amp;amp; c tag</title><link href="https://owin2828.github.io/devlog/2020/01/06/web-2.html" rel="alternate" type="text/html" title="[Web] JSTL &amp; c tag" /><published>2020-01-06T17:26:00+09:00</published><updated>2020-01-06T17:26:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/06/web-2</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/06/web-2.html">&lt;ul&gt;
  &lt;li&gt;본 문서에서는 JSTL 및 c tag에 대하여 알아보도록 한다.&lt;/li&gt;
  &lt;li&gt;출처: https://bit.ly/2OpbwWJ, https://bit.ly/2oboH2w&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-jstl&quot;&gt;1. JSTL&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSTL&lt;/code&gt;(&lt;strong&gt;J&lt;/strong&gt;SP &lt;strong&gt;S&lt;/strong&gt;tandard &lt;strong&gt;T&lt;/strong&gt;ag &lt;strong&gt;L&lt;/strong&gt;ibrary)는 JSP페이지에서 많이 사용되는&lt;br /&gt;
논리적인 판단, 반복처리, 포맷처리를 위한 커스텀 태그를 표준으로 만들어 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;라이브러리&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-1-why-jstl&quot;&gt;1-1. Why JSTL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSP는 HTML 코드와 스크립트릿, 표현식등의 스크립트 코드가 섞여 &lt;code class=&quot;highlighter-rouge&quot;&gt;가독성이 떨어짐&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;이를 해결하기 위해 HTML 태그와 비슷한 코드를 사용해 처리하는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;JSTL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-2-jstl-사용법&quot;&gt;1-2. JSTL 사용법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSTL 사용법으로는 다음과 같이 두 가지 방법이 존재
    &lt;ol&gt;
      &lt;li&gt;pom.xml에 &lt;code class=&quot;highlighter-rouge&quot;&gt;maven&lt;/code&gt; 의존 설정
        &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jstl&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; 파일을 WEB-INF/lib 디렉토리에 복사&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-3-jstl이-제공하는-태그&quot;&gt;1-3. JSTL이 제공하는 태그&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSTL의 &lt;code class=&quot;highlighter-rouge&quot;&gt;태그&lt;/code&gt;는 다음과 같은 종류가 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;코어&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;주요기능: 변수지원, 흐름제어, URL 처리&lt;/li&gt;
      &lt;li&gt;접두어: &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;관련 URL: &lt;a href=&quot;http://java.sun.com/jsp/jstl/core&quot;&gt;http://java.sun.com/jsp/jstl/core&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;주요기능: XML 코어, 흐름 제어, XML 변환&lt;/li&gt;
      &lt;li&gt;접두어: &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;관련 URL: &lt;a href=&quot;http://java.sun.com/jsp/jstl/xml&quot;&gt;http://java.sun.com/jsp/jstl/xml&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;국제화&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;주요기능: 지역, 메시지 형식, 숫자 및 날짜 형식&lt;/li&gt;
      &lt;li&gt;접두어: &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;관련 URL: &lt;a href=&quot;http://java.sun.com/jsp/jstl/fmt&quot;&gt;http://java.sun.com/jsp/jstl/fmt&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DataBase&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;주요기능: SQL&lt;/li&gt;
      &lt;li&gt;접두어: &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;관련 URL: &lt;a href=&quot;http://java.sun.com/jsp/jstl/sql&quot;&gt;http://java.sun.com/jsp/jstl/sql&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;함수&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;주요기능: 컬렉션 처리, String 처리&lt;/li&gt;
      &lt;li&gt;접두어: &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;관련 URL: [http://java.sun.com/jsp/jstl/functions])(http://java.sun.com/jsp/jstl/functions)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;이 중, 제일 많이 사용되는 태그는 &lt;code class=&quot;highlighter-rouge&quot;&gt;c tag(코어)&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-c-tag&quot;&gt;2. C Tag&lt;/h2&gt;
&lt;p&gt;코어 태그 라이브러리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;변수 설정&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;논리 처리&lt;/code&gt;에 사용되는 스크립트 코드를 대체하는 태그를 제공&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변수 지원:
    &lt;ul&gt;
      &lt;li&gt;set, remove&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;흐름 제어:
    &lt;ul&gt;
      &lt;li&gt;if, choose, forEach, forTokens&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;URL 처리:
    &lt;ul&gt;
      &lt;li&gt;import, redirect, url&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기타 태그:
    &lt;ul&gt;
      &lt;li&gt;catch, out&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-1-set-remove-변수-설정&quot;&gt;2-1. set, remove (변수 설정)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:set&amp;gt;&lt;/code&gt; 태그는 &lt;code class=&quot;highlighter-rouge&quot;&gt;EL 변수 값&lt;/code&gt; 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;EL 변수의 프로퍼티 값&lt;/code&gt;을 지정하거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSTL 태그&lt;/code&gt;에서 사용할 변수의 값을 처리할 때 다음과 같이 사용
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:set var=&quot;varName&quot; value=&quot;varValue&quot; [scope=&quot;지정영역&quot;] /&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:set target=&quot;대상&quot; property=&quot;프로퍼티 이름&quot; value=&quot;값&quot; /&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 첫번째 사용법 (jstl 변수를 생성하여 사용하는법) --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:set &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;  value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;니나노&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 두번째 사용법 (빈즈활용) --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 자바 빈즈가 필요함. 한페이지에서 설명하기위해.. map 으로 대체 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;%&amp;gt;&lt;/span&gt;
        
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:set &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;  value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%=member%&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;${member.name}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:set &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%=member%&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; property = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; value = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;홍길동2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;실행결과&lt;/code&gt;&lt;br /&gt;
니나노&lt;br /&gt;
홍길동&lt;br /&gt;
홍길동2&lt;br /&gt;
홍길동2&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:remove&amp;gt;&lt;/code&gt; 태그는 &lt;c:set&gt; 태그로 지정한 변수를 `삭제`할 때 다음과 같이 사용
&lt;/c:set&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:remove var=&quot;varName&quot; [scope=&quot;지정영역&quot;] /&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:set &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;  value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;니나노&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;${test1}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- c:remove 사용하여 c:set 변수를 삭제 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:remove &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;${test1}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;실행결과&lt;/code&gt;&lt;br /&gt;
니나노&lt;br /&gt;
(빈 텍스트가 출력 됨)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-2-if-choose-조건문&quot;&gt;2-2. if, choose (조건문)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt; 태그는 조건의 &lt;code class=&quot;highlighter-rouge&quot;&gt;참/거짓&lt;/code&gt; 유무에 따라 분기하며 다음과 같이 사용
    &lt;blockquote&gt;
      &lt;p&gt;else는 따로 존재하지 않음, 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;choose&lt;/code&gt;를 사용&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:if test=&quot;조건&quot; [var = &quot;testResult&quot;]/&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:set &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;  value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:if &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1보다 크다&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:if &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1보다 작다&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:if&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;실행결과&lt;/code&gt;&lt;br /&gt;
1보다 크다&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:choose&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:when&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:otherwise&amp;gt;&lt;/code&gt; 태그를 else if, else 대신 다음과 같이 함께 사용
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:chose&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:when test=&quot;조건&quot;&amp;gt;실행문&amp;lt;/c:when&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:otherwise&amp;gt;실행문&amp;lt;/c:otherwise&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/c:chose&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:set &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;  value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:choose&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:when &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;1보다 작음&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:when&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:when &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;3과 같음&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:when&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:otherwise&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;쩌리&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:otherwise&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:choose&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;실행결과&lt;/code&gt;&lt;br /&gt;
3과 같음&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-3-foreach-fortokens-반복문&quot;&gt;2-3. forEach, forTokens (반복문)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:forEach&amp;gt;&lt;/code&gt; 태그는 자바의 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;문과 동일하며, 다음과 같이 사용
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:forEach var=&quot;변수&quot;  item = &quot;아이템&quot; [begin =&quot;시작값&quot; end=&quot;종료값&quot; step=&quot;증가값&quot; varStatus=&quot;현재의값&quot;]/&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- memberList라는 구조체가 존재하며 프로퍼티 값은 name, age를 가짐 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:forEach &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; items=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%=memberList %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          이름 : ${member.name} 나이 : ${member.age}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;실행결과&lt;/code&gt;&lt;br /&gt;
이름: 홍길동 나이: 21&lt;br /&gt;
이름: 김순이 나이: 23&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:forTokens&amp;gt;&lt;/code&gt; 태그는 자바의 &lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt; 기능과 유사하며, 다음과 같이 사용
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:forTokens var=&quot;변수&quot; items=&quot;아이템&quot; delims=&quot;자를 문구&quot; [varStatus=&quot;status&quot;]/&amp;gt;&lt;/code&gt;
        &lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:set &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nameGroup&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;철수,영미,나미,우솝,루피&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;c:forTokens &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; items=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nameGroup&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt; delims=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color: yellow;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          이름 : ${name}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/c:forTokens&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;실행결과&lt;/code&gt;&lt;br /&gt;
이름: 철수&lt;br /&gt;
이름: 영미&lt;br /&gt;
이름: 나미&lt;br /&gt;
이름: 우솝&lt;br /&gt;
이름: 루피&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-4-url-imnport-redirect-url-처리&quot;&gt;2-4. url, imnport, redirect (URL 처리)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;해당 태그들은 문법만 정리&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:url value = &quot;링크&quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:import url=&quot;url&quot; [context=&quot;context&quot;] [var=&quot;varName&quot;]  [scope=&quot;{page|request|session|application}&quot;] [charEncoding=&quot;charEncoding&quot;]&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:redirect url=&quot;value&quot; [context=&quot;context&quot;]/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-5-catch-out-기타&quot;&gt;2-5. catch, out (기타)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;해당 태그들은 문법만 정리&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:catch var=&quot;명칭&quot;&amp;gt;&amp;lt;/c:catch&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c:out value=&quot;value&quot; [escapeXml=&quot;{true|false}&quot;] [default=&quot;value가 없을 때 표시될 문자&quot;]  /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="web" /><summary type="html">본 문서에서는 JSTL 및 c tag에 대하여 알아보도록 한다. 출처: https://bit.ly/2OpbwWJ, https://bit.ly/2oboH2w</summary></entry><entry><title type="html">[Web] Get VS Post</title><link href="https://owin2828.github.io/devlog/2020/01/06/web-1.html" rel="alternate" type="text/html" title="[Web] Get VS Post" /><published>2020-01-06T17:22:00+09:00</published><updated>2020-01-06T17:22:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/06/web-1</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/06/web-1.html">&lt;ul&gt;
  &lt;li&gt;본 문서에서는 GET / POST 방식에 대하여 알아보도록 한다.&lt;/li&gt;
  &lt;li&gt;출처: &lt;a href=&quot;https://bit.ly/31M2YN8&quot;&gt;https://bit.ly/31M2YN8&lt;/a&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0-들어가기-앞서&quot;&gt;0. 들어가기 앞서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용자는 단순히 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;을 입력하여 페이지로 이동을 하지만, 서버 내부에서는 클라이언트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;요청&lt;/code&gt;에 응답하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;처리&lt;/code&gt;를 해주어야 함&lt;/li&gt;
  &lt;li&gt;이 때,  클라이언트가 서버로 요청을 보내는 방법인 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP Method&lt;/code&gt;에는 크게 다음과 같은 2가지 방법이 존재
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-get-방식&quot;&gt;1. GET 방식&lt;/h2&gt;
&lt;p&gt;GET은 어떤 정보를 가져와 &lt;code class=&quot;highlighter-rouge&quot;&gt;조회&lt;/code&gt;하기 위해 사용하며, 간단한 데이터를 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;에 넣도록 설계된 방식으로 다음과 같은 특징을 지님&lt;/p&gt;

&lt;h3 id=&quot;1-1-get-방식의-특징&quot;&gt;1-1. GET 방식의 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;URL에 변수(데이터)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;포함&lt;/code&gt;시켜 요청&lt;/li&gt;
  &lt;li&gt;데이터를 Header에 &lt;code class=&quot;highlighter-rouge&quot;&gt;포함&lt;/code&gt;하여 전송&lt;/li&gt;
  &lt;li&gt;URL에 데이터가 &lt;code class=&quot;highlighter-rouge&quot;&gt;노출&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;전송하는 길이에 &lt;code class=&quot;highlighter-rouge&quot;&gt;제한&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;캐싱&lt;/code&gt;이 가능&lt;/li&gt;
  &lt;li&gt;형식
    &lt;ul&gt;
      &lt;li&gt;URL?변수명1=값1&amp;amp;변수명2=값2&amp;amp;변수명3=값3&amp;amp;…&lt;/li&gt;
      &lt;li&gt;다음과 같이 직접 URI를 입력하여 요청가능
        &lt;blockquote&gt;
          &lt;p&gt;/hello/test.php?name1=value1&amp;amp;name2=value2&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-post-방식&quot;&gt;2. POST 방식&lt;/h2&gt;
&lt;p&gt;POST 방식은 데이터를 서버로 제출하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;추가&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;수정&lt;/code&gt;하기 위해서 데이터를 전송하는 방식으로 다음과 같은 특징을 지님&lt;/p&gt;

&lt;h3 id=&quot;2-1-post-방식의-특징&quot;&gt;2-1. POST 방식의 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;URL에 변수(데이터)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;포함하지 않고&lt;/code&gt;시켜 요청&lt;/li&gt;
  &lt;li&gt;데이터를 Body에 &lt;code class=&quot;highlighter-rouge&quot;&gt;포함&lt;/code&gt;하여 전송&lt;/li&gt;
  &lt;li&gt;URL에 데이터가 &lt;code class=&quot;highlighter-rouge&quot;&gt;노출되지 않음&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;전송하는 길이에 &lt;code class=&quot;highlighter-rouge&quot;&gt;제한이 없음&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;캐싱이 &lt;code class=&quot;highlighter-rouge&quot;&gt;불가능&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;형식
    &lt;blockquote&gt;
      &lt;p&gt;POST /hello/test.php HTTP/1.1&lt;br /&gt;
    Host: jmnote.com&lt;br /&gt;
    name1=value1&amp;amp;name2=value2&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="web" /><summary type="html">본 문서에서는 GET / POST 방식에 대하여 알아보도록 한다. 출처: https://bit.ly/31M2YN8</summary></entry><entry><title type="html">[Java] JDBC / JPA &amp;amp; Hibernate / Mybatis 차이</title><link href="https://owin2828.github.io/devlog/2020/01/06/java-5.html" rel="alternate" type="text/html" title="[Java] JDBC / JPA &amp; Hibernate / Mybatis 차이" /><published>2020-01-06T17:13:00+09:00</published><updated>2020-01-06T17:13:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/01/06/java-5</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/01/06/java-5.html">&lt;ul&gt;
  &lt;li&gt;본 문서에서는 JDBC, JPA/Hybernate, Mybatis에 대하여 알아보도록 한다.&lt;/li&gt;
  &lt;li&gt;출처: &lt;a href=&quot;http://bitly.kr/C72t7zb&quot;&gt;http://bitly.kr/C72t7zb&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0-영속성&quot;&gt;0. 영속성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데이터를 생성한 프로그램이 종료되더라도 &lt;code class=&quot;highlighter-rouge&quot;&gt;사라지지 않는&lt;/code&gt; 데이터의 특성&lt;/li&gt;
  &lt;li&gt;Persistence Layer: 프로그램 아키텍쳐에서 데이터에 &lt;code class=&quot;highlighter-rouge&quot;&gt;영속성&lt;/code&gt;을 부여해주는 계층&lt;/li&gt;
  &lt;li&gt;Persistence Framework: JDBC 프로그래밍의 복잡함 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;간단히&lt;/code&gt; DB와 연동되는 시스템을 빠르게 개발할 수 있으며,&lt;br /&gt;
안정성을 보장해주는 프레임크. 그 종류는 다음과 같다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL Mapper&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ORM&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0-1-sql-mapper&quot;&gt;0-1. SQL Mapper&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SQL &amp;lt;- 매핑 -&amp;gt; Object 필드&lt;/li&gt;
  &lt;li&gt;SQL문으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;직접&lt;/code&gt; DB의 데이터를 다룸
    &lt;ul&gt;
      &lt;li&gt;종류: &lt;code class=&quot;highlighter-rouge&quot;&gt;Mybatis&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplates&lt;/code&gt;등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0-2-orm&quot;&gt;0-2. ORM&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DB 데이터 &amp;lt;- 매핑 -&amp;gt; Object 필드&lt;/li&gt;
  &lt;li&gt;객체를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;간접적&lt;/code&gt;으로 DB의 데이터를 다룸
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;직관적 코드&lt;/code&gt;(매서드)를 통해 조작 가능&lt;/li&gt;
      &lt;li&gt;객체 간의 관계를 바탕으로 SQL을 &lt;code class=&quot;highlighter-rouge&quot;&gt;자동 생성&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;종류: &lt;code class=&quot;highlighter-rouge&quot;&gt;JPA&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hibernate&lt;/code&gt;등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0-3-orm의-장단점&quot;&gt;0-3. ORM의 장,단점&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체 지향적인 코드로 인해 더 &lt;code class=&quot;highlighter-rouge&quot;&gt;직관적&lt;/code&gt;이고 비즈니스 로직에 더 집중할 수 있게 도와줌&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;재사용&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;유지보수&lt;/code&gt;의 편리성이 증가함&lt;/li&gt;
  &lt;li&gt;DBMS에 대한 종속성이 &lt;code class=&quot;highlighter-rouge&quot;&gt;줄어듬&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;완벽한 ORM 으로만 &lt;code class=&quot;highlighter-rouge&quot;&gt;서비스를 구현하기가 어려움&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;잘못 구현된 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;속도 저하&lt;/code&gt; 및 심각할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;일관성이 무너지는&lt;/code&gt; 문제점 발생&lt;/li&gt;
  &lt;li&gt;프로시저가 많은 시스템에선 ORM의 &lt;code class=&quot;highlighter-rouge&quot;&gt;객체 지향적인 장점을 활용하기 어려움&lt;/code&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-jdbcjava-database-connectivity&quot;&gt;1. JDBC(Java Database Connectivity)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/java/java_5_1.jpg&quot; alt=&quot;jdbc&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JDBC는 DB에 접근할 수 있도록 java에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;모든 Java의 Data Access 기술의 &lt;code class=&quot;highlighter-rouge&quot;&gt;근간&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;모든 Persistence Framework는 &lt;code class=&quot;highlighter-rouge&quot;&gt;내부적&lt;/code&gt;으로 JDBC API를 사용 &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-jpajava-persistence-api&quot;&gt;2. JPA(Java Persistence API)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/java/java_5_2.jpg&quot; alt=&quot;JPA&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java ORM 기술에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;API 표준 명세&lt;/code&gt;로 Java에서 제공하는 API&lt;/li&gt;
  &lt;li&gt;JPA의 구성요소
    &lt;ol&gt;
      &lt;li&gt;javax.persistence 패키지로 정의된 API&lt;/li&gt;
      &lt;li&gt;JPQL(Java Persistence Query Language)&lt;/li&gt;
      &lt;li&gt;객체/관계 메타데이터&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자가 원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JPA 구현체&lt;/code&gt;를 선택해 사용 가능
    &lt;ul&gt;
      &lt;li&gt;Hibernate, EclipseLink, DataNucleus, OpenJPA, TopLink Essentails 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-1-hibernate&quot;&gt;2-1. Hibernate&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/java/java_5_3.jpg&quot; alt=&quot;Hibernate&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hibernate는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JPA의 구현체 중 하나&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;내부적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;JDBC API&lt;/code&gt;를 사용해 SQL 구현&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HQL&lt;/code&gt;(Hibernate Query Language)라 불리는 강력한 쿼리 언어 포함&lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;빠른 개발&lt;/code&gt; 가능&lt;/li&gt;
      &lt;li&gt;쿼리보다는 &lt;code class=&quot;highlighter-rouge&quot;&gt;객체&lt;/code&gt;에 집중 가능&lt;/li&gt;
      &lt;li&gt;테이블 생성, 변경등 &lt;code class=&quot;highlighter-rouge&quot;&gt;관리&lt;/code&gt;가 쉬움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;어려움&lt;/code&gt;(많은 것을 알아야 함)&lt;/li&gt;
      &lt;li&gt;오사용시 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 손실&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;성능 저하&lt;/code&gt; 유발 &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-mybatis&quot;&gt;3. Mybatis&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/java/java_5_4.jpg&quot; alt=&quot;Mybatis&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;개발자가 정의한 SQL을 지원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SQL Mapper&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;DB의 레코드에 매핑하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Annotaion&lt;/code&gt; 사용 가능&lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;SQL에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;모든 컨트롤&lt;/code&gt;을 할 경우 적합&lt;/li&gt;
      &lt;li&gt;SQL &lt;code class=&quot;highlighter-rouge&quot;&gt;쿼리 최적화&lt;/code&gt;가 잘 되있을 경우 유용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;모든 관계&lt;/code&gt;에 대한 조작을 하고자 할 때는 적합하지 않음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="java" /><summary type="html">본 문서에서는 JDBC, JPA/Hybernate, Mybatis에 대하여 알아보도록 한다. 출처: http://bitly.kr/C72t7zb</summary></entry></feed>