<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://owin2828.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://owin2828.github.io/" rel="alternate" type="text/html" /><updated>2020-11-17T16:52:45+09:00</updated><id>https://owin2828.github.io/feed.xml</id><title type="html">낮코밤코</title><subtitle>Already done, cause will do</subtitle><author><name>owin2828</name></author><entry><title type="html">[GraphQL] Psima를 이용한 Database 연동</title><link href="https://owin2828.github.io/devlog/2020/11/17/GraphQL-6.html" rel="alternate" type="text/html" title="[GraphQL] Psima를 이용한 Database 연동" /><published>2020-11-17T15:09:00+09:00</published><updated>2020-11-17T15:09:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/17/GraphQL-6</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/17/GraphQL-6.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;지난 포스팅에 이어 이번에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;prisma&lt;/code&gt;를 사용하여 database를 연동해보도록 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SQLite&lt;/code&gt;를 DB로 이용하여 데이터를 저장할 예정이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;본 시리즈는 &lt;a href=&quot;https://www.howtographql.com/graphql-js/0-introduction/&quot;&gt;HOW TO GRAPHQL&lt;/a&gt; 글을 참고하여 작성했습니다.&lt;br /&gt;
기존에 참조하던 &lt;a href=&quot;https://velog.io/@cadenzah/graphql-node-01-introduction&quot;&gt;cadenzah&lt;/a&gt; 님의 포스팅이 deprecated되어 새롭게 작성하였습니다.&lt;br /&gt;
오타 및 의역이 있을 수 있으니 양해를 부탁 드리며, 수정 사항은 댓글로 알려주세요. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;prisma1-vs-prisma2&quot;&gt;Prisma1 vs Prisma2&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;기존에 Prisma1에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Prisma2&lt;/code&gt;로 변경되며 &lt;a href=&quot;https://gmyankee.tistory.com/265?category=1084683&quot;&gt;많은 부분&lt;/a&gt;이 변경되었다. 이로 인해, GraphQL 블로그의 튜토리얼이 변경된듯 하다.&lt;br /&gt;
내가 이 시리즈의 포스팅을 작성하게 된 가장 큰 이유가 된 부분이다..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/GraphQL/graphql_6_2.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;Prisma DB Proxy 선택사항(출처: https://www.prisma.io/blog/announcing-prisma-2-zq1s745db8i5)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/GraphQL/graphql_6_3.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;Prisma1 vs Prisma2(출처: https://www.codemochi.com/blog/2019-06-26-prisma-2-sneak-peak)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-prisma는-무엇인가&quot;&gt;1. Prisma는 무엇인가?&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Prisma&lt;/code&gt;는 개발자들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;깔끔&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;type-safe&lt;/code&gt;한 API를 통해 데이터베이스에 접근하게 해주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;오픈소스&lt;/code&gt;이다.&lt;br /&gt;
이는 다음과 같은 3가지 툴과 각각의 기능으로 구성이 되어있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Primsa Client&lt;/code&gt;: Node.js 및 TypeScript를 위한 쿼리 자동 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Prisma Migrate&lt;/code&gt;: 명시적인 데이터 모델링 및 마이그레이션 시스템&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Prisma Studio&lt;/code&gt;: GUI를 통한 데이터베이스 접근 및 수정 &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-prisma를-사용하는-이유&quot;&gt;2. Prisma를 사용하는 이유&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;지금까지 살펴본 방법으로 매우 간단하고 아름답게 GraphQL 서버가 동작함을 알 수 있다.&lt;br /&gt;
그러나 실제로 서버를 개발할 때는 이렇게 간단한 문제들로만 구성되는 않는다.&lt;/p&gt;

&lt;p&gt;특히 GraphQL 쿼리들은 깊은 단계로 &lt;code class=&quot;highlighter-rouge&quot;&gt;중첩&lt;/code&gt;이 될 수 있는데, 이때 리졸버를 구현하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;까다롭고&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;성능문제&lt;/code&gt;를 야기할 수 있다.&lt;br /&gt;
이러한 개발자들의 고충을 해결하기 위해, Prisma는 더욱 효율적으로 데이터에 접근하는 방법에 초점을 맞췄다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-prisma--sqlite-설정하기&quot;&gt;3. Prisma &amp;amp; SQLite 설정하기&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;우선 다음의 명령을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Prisma CLI&lt;/code&gt;를 설치한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./hackernews-node/&lt;/span&gt;
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; @prisma/cli &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음의 명령을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.prisma&lt;/code&gt; 파일을 생성한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./hackernews-node/&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;prisma
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;prisma/schema.prisma
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Prisma1과 Prisma2가 가장 다른 점은 위의 방법처럼 Database에 관련된 &lt;code class=&quot;highlighter-rouge&quot;&gt;파일&lt;/code&gt;을 관리하는 방법과 &lt;code class=&quot;highlighter-rouge&quot;&gt;아키텍처&lt;/code&gt;가 다르다.&lt;br /&gt;
자세한 사항은 &lt;a href=&quot;https://gmyankee.tistory.com/265?category=1084683&quot;&gt;Prisma2와 Prisma1의 차이점&lt;/a&gt;을 참고&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 과정을 통해 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.prisma&lt;/code&gt;는 데이터베이스 스키마처럼 생각하면 되며, 다음과 같이 구성된다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Data source&lt;/code&gt;: 데이터베이스에 연결한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Generator&lt;/code&gt;: Prisma Client를 생성한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Data model&lt;/code&gt;: 애플리케이션의 모델을 정의한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이를 코드로 작성해보자.&lt;/p&gt;
&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ./&lt;span class=&quot;n&quot;&gt;hackernews&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;prisma&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;prisma&lt;/span&gt;

// &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;datasource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;sqlite&quot;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;      = &lt;span class=&quot;s2&quot;&gt;&quot;file:./dev.db&quot;&lt;/span&gt;
}

// &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;prisma-client-js&quot;&lt;/span&gt;
}

// &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Link&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;      @&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; @&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;autoincrement&lt;/span&gt;())
  &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; @&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;())
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; 모델은 &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; 데이터 베이스 테이블의 구조를 정의하며, Prisma는 이를 기반으로 테이블을 생성해준다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-sqlite로-시작하기&quot;&gt;4. SQLite로 시작하기&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;드디어 &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLite&lt;/code&gt; 데이터베이스를 만들 시간이다. SQLite는 &lt;code class=&quot;highlighter-rouge&quot;&gt;serverless&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;설정의 간편함&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;트랜잭션&lt;/code&gt;등 다양한 장점이 있다.&lt;br /&gt;
또한 다른 SQL 데이터베이스와는 달리 별도의 서버 프로세스가 없어 일반 디스크 파일에 직접 읽고 쓰기를 수앻한다.&lt;br /&gt;
하나의 완전한 데이터 베이스(table, indice, trigger 및 view)가 하나의 디스크 파일에 포함된다.&lt;br /&gt;
이러한 장점은 본 프로젝트와 잘 어울린다.&lt;/p&gt;

&lt;p&gt;다행히 Prisma와의 연동은 간편하게 진행할 수 있는데, 다음과 같은 명령어를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;migration&lt;/code&gt;을 생성함으로써 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./hackernews-node/&lt;/span&gt;
npx prisma migrate save &lt;span class=&quot;nt&quot;&gt;--experimental&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 명령어를 수행하면 다음과같이 묻는 문구가 뜨게 되는데 Yes를 클릭하고, 이름을 정해준다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You are trying to create a migration &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;SQLite database dev.db.
A database with that name doesn&lt;span class=&quot;s1&quot;&gt;'t exist at file:./dev.db
&amp;gt; YES
&amp;gt; Name of migration:
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;성공적으로 수행하고 나면, &lt;code class=&quot;highlighter-rouge&quot;&gt;prisma&lt;/code&gt; 디렉토리 밑에 &lt;code class=&quot;highlighter-rouge&quot;&gt;/migrations&lt;/code&gt;라는 디렉토리가 생성되었음을 알 수 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; 파일을 참조하면, 우리가 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt;에 대한 테이블구성을 볼 수 있으며, 여러가지 수정사항이 함께 기록된다.&lt;/p&gt;

&lt;p&gt;이제 실제로 데이터베이스에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;마이그레이션&lt;/code&gt;을 실행하기 위해 다음의 명령을 수행한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./hackernews-node/&lt;/span&gt;
npx prisma migrate up &lt;span class=&quot;nt&quot;&gt;--experimental&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;이제 테이블이 있는 데이터베이스가 &lt;code class=&quot;highlighter-rouge&quot;&gt;생성&lt;/code&gt;되었다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5-prisma-client-생성&quot;&gt;5. Prisma Client 생성&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;위에서 생성한 데이터 모델을 기반으로 Prisma Client를 생성해보자.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./hackernews-node/&lt;/span&gt;
npx prisma generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;성공적으로 수행된다면, Prisma client를 &lt;code class=&quot;highlighter-rouge&quot;&gt;/node_modules/@prisma/client&lt;/code&gt;에서 가져와 사용할 수 있다는 문구가 뜨게 된다.&lt;br /&gt;
Prisma Client로 첫 번째 쿼리를 만들어서 분석을 하기 위해, 별도의 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/script.js&lt;/code&gt; 파일을 만들고 다음 코드를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrismaClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@prisma/client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prisma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrismaClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prisma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prisma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 다음과 같이 동작한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;노드모듈 &lt;code class=&quot;highlighter-rouge&quot;&gt;PrismaClient&lt;/code&gt;에서 생성자를 가져옴&lt;/li&gt;
  &lt;li&gt;가져온 모듈 인스턴스화, &lt;code class=&quot;highlighter-rouge&quot;&gt;PrismaClient&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;데이터베이스에 쿼리를 보내기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;로 호출되는 main 함수를 정의&lt;/li&gt;
  &lt;li&gt;실제 main 함수 호출&lt;/li&gt;
  &lt;li&gt;스크립트가 종료되면 데이터베이스 연결을 끊음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위와 같이 정상적으로 설정된다면, 아래 사진처럼 자동완성이 가능해진다.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/GraphQL/graphql_6_1.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;Prisma 인스턴스를 가져와 자동완성 되는 모습&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;위에서 작성한 스크립트를 다음의 명령으로 실행하자.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./hackernews-node/&lt;/span&gt;
node src/script.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;성공적으로 수행된다면, 아무것도 없는 &lt;code class=&quot;highlighter-rouge&quot;&gt;빈배열&lt;/code&gt;이 응답될 것이다. 새로운 link 생성을 위해 다음과 같이 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./hackernews-node/src/script.js&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newLink&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prisma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Fullstack tutorial for GraphQL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;www.howtographql.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prisma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 성공적으로 가져온 결과물을 확인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;createdAt:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020-11-17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;26.767&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;description:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'Fullstack&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;tutorial&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;GraphQL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;url:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'www.howtographql.com'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-workflow-요약&quot;&gt;6. Workflow 요약&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;데이터를 업데이트하는 위의 과정들을 요약하자면 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Prisma 데이터 모델 수정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prisma migrate&lt;/code&gt; 명령을 통해 데이터베이스 마이그레이션&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Prisma Client&lt;/code&gt; 생성&lt;/li&gt;
  &lt;li&gt;어플리케이션에서 코드로 데이터베이스에 접근&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Prisma와 SQLite를 이용하여 데이터베이스에 데이터를 저장하는 방법에 대해 알아보았다.&lt;br /&gt;
다른 DB를 사용하기 위해서는 datasource에 다른 db를 연결하면 된다.&lt;br /&gt;
Prisma는 꼭 GraphQL이 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;REST&lt;/code&gt;ful API에서도 사용이 가능하다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://velog.io/@jhj46456/Prisma2-tutorial&quot;&gt;이곳&lt;/a&gt;을 참조&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음 포스팅에서는 리졸버 함수 내에서 데이터베이스에 접근하는 방법에 대해 알아보도록 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;refernce&quot;&gt;Refernce&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/wasd/prisma2-%EC%82%AC%EC%9A%A9%EA%B8%B0-70c8517539d&quot;&gt;Prisma2 사용기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmyankee.tistory.com/265?category=1084683&quot;&gt;Prisma2와 Prisma1의 차이점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="GraphQL" /><summary type="html">들어가기 앞서 지난 포스팅에 이어 이번에는 prisma를 사용하여 database를 연동해보도록 한다. SQLite를 DB로 이용하여 데이터를 저장할 예정이다.</summary></entry><entry><title type="html">[GraphQL] 간단한 뮤테이션 작성</title><link href="https://owin2828.github.io/devlog/2020/11/17/GraphQL-5.html" rel="alternate" type="text/html" title="[GraphQL] 간단한 뮤테이션 작성" /><published>2020-11-17T13:38:00+09:00</published><updated>2020-11-17T13:38:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/17/GraphQL-5</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/17/GraphQL-5.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;지난 포스팅에 이어 이번에는 간단한 &lt;code class=&quot;highlighter-rouge&quot;&gt;뮤테이션&lt;/code&gt;을 작성해보도록 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;본 시리즈는 &lt;a href=&quot;https://www.howtographql.com/graphql-js/0-introduction/&quot;&gt;HOW TO GRAPHQL&lt;/a&gt; 글을 참고하여 작성했습니다.&lt;br /&gt;
기존에 참조하던 &lt;a href=&quot;https://velog.io/@cadenzah/graphql-node-01-introduction&quot;&gt;cadenzah&lt;/a&gt; 님의 포스팅이 deprecated되어 새롭게 작성하였습니다.&lt;br /&gt;
오타 및 의역이 있을 수 있으니 양해를 부탁 드리며, 수정 사항은 댓글로 알려주세요. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-스키마-확장&quot;&gt;1. 스키마 확장&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;에 작성된 스키마를 다음과 같이 변경한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./hackernews-node/src/index.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeDefs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
  type Query {
    info: String!
    feed: [Link!]!
  }

  type Mutation {
    post(url: String!, description: String!): Link!
  }

  type Link {
    id: ID!
    description: String!
    url: String!
  }
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기까지 하다보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;typDefs&lt;/code&gt;에 계속하여 스키마를 지정하기에는 무리가 있음을 알 수 있다.&lt;br /&gt;
따라서 스키마를 별도의 파일로 분리하여 리팩토링을 해보도록 하자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;schema.graphql&lt;/code&gt; 파일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 디렉토리 밑에 생성한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ./hackernews-node/src&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;src/schema.graphql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음의 스키마를 새로 생성한 파일에 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!]!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutation&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!):&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 과정을 마치고, 기존의 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;에서 스키마를 정의하는 부분을 삭제 후, 다음과 같이 변경한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./hackernews-node/src/index.js&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GraphQLServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;typeDefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./src/schema.graphql&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQLServer&lt;/code&gt; 생성자는 위의 예시처럼, &lt;code class=&quot;highlighter-rouge&quot;&gt;typeDefs&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;의 형태로 제공되어도 되고,&lt;br /&gt;
스키마의 정의를 포함하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;별도의 파일&lt;/code&gt;을 참조해도 된다는 장점을 지닌다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-resolver-함수-구현&quot;&gt;2. resolver 함수 구현&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;리졸버 함수를 다음과 같이 수정한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./hackernews-node/src/index.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;link-0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;www.howtographql.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Fullstack tutorial for GraphQL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;This is the API of a Hackernews Clone&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;link-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;새로 생성되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; 항목에 대한 고유한 ID 값의 변수를 할당한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; 리졸버는 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; 객체를 생성하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; 리스트에 추가 후, 새로 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; 객체를 반환한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;기존에는 없었던, 리졸버 함수에 2번째 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; 가 담겨온다.&lt;br /&gt;
지금의 경우 생성될 &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;을 의미한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-뮤테이션-테스트&quot;&gt;3. 뮤테이션 테스트&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;다음과 같은 새로운 API 동작들을 테스트 해보자.&lt;/p&gt;
&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;www.prisma.io&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Prisma replaces traditional ORMs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;이때 post 리졸버 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;link&lt;/code&gt; 객체를 반환하므로, mutation에서 해당 객체의 반환 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;적어도 하나 이상&lt;/code&gt;의 필드로 받아야 한다.&lt;br /&gt;
그렇지 않으면 에러가 발생하며, 위의 예시에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;를 통해 반환된 객체의 정보를 받아온다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이에 대한 서버의 응답은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;link-1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 뮤테이션을 통해 한번 요청을 보낼 때마다, &lt;code class=&quot;highlighter-rouge&quot;&gt;idCount&lt;/code&gt; 값이 1씩 증가하고, ID가 바뀜을 알 수 있다.&lt;br /&gt;
생성된 객체들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;feed&lt;/code&gt; 쿼리를 통해 조회할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;그러나 위와 같은 방법은 메모리를 사용하기에, 서버가 재시작되면 전부 &lt;code class=&quot;highlighter-rouge&quot;&gt;초기화&lt;/code&gt;된다.&lt;br /&gt;
따라서 다음 포스팅에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Database 연동&lt;/code&gt;을 통해 저장하는 방법을 알아보자.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="GraphQL" /><summary type="html">들어가기 앞서 지난 포스팅에 이어 이번에는 간단한 뮤테이션을 작성해보도록 한다.</summary></entry><entry><title type="html">[GraphQL] 간단한 쿼리 작성</title><link href="https://owin2828.github.io/devlog/2020/11/17/GraphQL-4.html" rel="alternate" type="text/html" title="[GraphQL] 간단한 쿼리 작성" /><published>2020-11-17T12:55:00+09:00</published><updated>2020-11-17T12:55:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/17/GraphQL-4</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/17/GraphQL-4.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;지난 포스팅에 이어 이번에는 간단한 쿼리를 작성해보도록 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;본 시리즈는 &lt;a href=&quot;https://www.howtographql.com/graphql-js/0-introduction/&quot;&gt;HOW TO GRAPHQL&lt;/a&gt; 글을 참고하여 작성했습니다.&lt;br /&gt;
기존에 참조하던 &lt;a href=&quot;https://velog.io/@cadenzah/graphql-node-01-introduction&quot;&gt;cadenzah&lt;/a&gt; 님의 포스팅이 deprecated되어 새롭게 작성하였습니다.&lt;br /&gt;
오타 및 의역이 있을 수 있으니 양해를 부탁 드리며, 수정 사항은 댓글로 알려주세요. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-스키마-확장&quot;&gt;1. 스키마 확장&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;에 작성된 스키마를 다음과 같이 변경한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./hackernews-node/src/index.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeDefs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
  type Query {
    info: String!
    feed: [Link!]!
  }

  type Link {
    id: ID!
    description: String!
    url: String!
  }
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt;라는 새로운 타입이 정의되었고, 이는 Hacker News에 게시될 수 있는 링크를 나타낸다.&lt;br /&gt;
또한 id, description, url을 필드 값으로 가지며, 이를 통해 Query에서 Link 항복의 리스트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;feed&lt;/code&gt;를 통해 받을 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-resolver-함수-구현&quot;&gt;2. resolver 함수 구현&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;GraphQL의 스키마에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;모든&lt;/code&gt; 필드 값에 대하여 리졸버 함수를 가지므로, 각 필드에 대응하는 함수를 구현해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ./hackernews-node/src/index.js&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;link-0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;www.howtographql.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Fullstack tutorial for GraphQL&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;This is the API of a Hackernews Clone&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;아직 DB를 연결하지 않았으므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;메모리&lt;/code&gt;에 정보들을 저장한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;feed&lt;/code&gt;라는 최상위 필드를 위한 새로운 리졸버를 추가한다.&lt;/li&gt;
  &lt;li&gt;스카미에 정의에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; 타입의 각 필드에 대응하는 3가지 리졸버들을 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 구현 사항들을 localhost:5000에서 다음의 쿼리를 통해 테스트 해보도록 한다.&lt;/p&gt;
&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이는 다음과 같은 응답을 돌려준다.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;feed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;link-0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;www.howtographql.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Fullstack tutorial for GraphQL&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-쿼리-리졸브-과정&quot;&gt;3. 쿼리 리졸브 과정&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;위에서 다루었던 쿼리는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;쿼리에 사용된 &lt;code class=&quot;highlighter-rouge&quot;&gt;feed&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; 4가지 필드는 모두 스키마 정의에서 확인 가능하다.&lt;br /&gt;
또한 각 필드를 위해 데이터를 반환해주는 리졸버 함수를 구현하게 된다.&lt;/p&gt;

&lt;p&gt;즉, GraphQL 서버는 쿼리에 포함된 &lt;code class=&quot;highlighter-rouge&quot;&gt;모든&lt;/code&gt; 필드에 대해 리졸버 함수를 각각 호출하고,&lt;br /&gt;
쿼리 모양에 따라 데이터를 잘 포장하여 응답으로 만드는 것이다.&lt;/p&gt;

&lt;p&gt;그러나 이러한 구현에서 벗어난 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; 타입의 리졸버이다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 GraphQL 리졸버 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;4개&lt;/code&gt;의 인자를 입력 받는데, 위 코드에서는 생략되어 있다.&lt;br /&gt;
보통 &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt;(혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;)라고 불리는 인자는 호출되기 직전 리졸버 실행의 결과값이다.&lt;/p&gt;

&lt;p&gt;위의 코드에서 보이듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;feed&lt;/code&gt; 리졸버가 호출되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt;에 포함된 모든 데이터릍 반환한다.&lt;br /&gt;
이어서 위 과정에서 반환된 리스트에 포함된 각 항목에 대해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; 타입의 리졸버가 호출된다.&lt;br /&gt;
따라서 그 결과로, &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt;가 가지는 3개의 리졸버의 &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt; 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; 리스트의 각 항목이다.&lt;/p&gt;

&lt;p&gt;현재 &lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; 리졸버 구현은 단순하게 이루어져 있기 때문에, 구현을 생략하더라고 정상적으로 서버가 동작한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이로써 기본적인 GraphQL의 쿼리를 알아보았다. 다음에는 간단한 뮤테이션에 대해 알아보자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="GraphQL" /><summary type="html">들어가기 앞서 지난 포스팅에 이어 이번에는 간단한 쿼리를 작성해보도록 한다.</summary></entry><entry><title type="html">[GraphQL] GraphQL 맛보기</title><link href="https://owin2828.github.io/devlog/2020/11/17/GraphQL-3.html" rel="alternate" type="text/html" title="[GraphQL] GraphQL 맛보기" /><published>2020-11-17T11:09:00+09:00</published><updated>2020-11-17T11:09:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/17/GraphQL-3</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/17/GraphQL-3.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;여태것 개념적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;이 무엇인지에 대하여 알아보았다. 그러나 현실은 이상과 다른법..&lt;br /&gt;
이제 실제 코드로 구현하는 방법을 알아볼 차례다.&lt;/p&gt;

&lt;p&gt;이를 위해 아주 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;로 프로젝트를 구성해보도록 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;본 시리즈는 &lt;a href=&quot;https://www.howtographql.com/graphql-js/0-introduction/&quot;&gt;HOW TO GRAPHQL&lt;/a&gt; 글을 참고하여 작성했습니다.&lt;br /&gt;
기존에 참조하던 &lt;a href=&quot;https://velog.io/@cadenzah/graphql-node-01-introduction&quot;&gt;cadenzah&lt;/a&gt; 님의 포스팅이 deprecated되어 새롭게 작성하였습니다.&lt;br /&gt;
오타 및 의역이 있을 수 있으니 양해를 부탁 드리며, 수정 사항은 댓글로 알려주세요. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-project-생성&quot;&gt;1. Project 생성&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;GraphQL을 사용하기 위해서는 다음과 같은 명령어를 터미널에 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;hackernews-node
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hackernews-node
npm init &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 명령을 통해, &lt;code class=&quot;highlighter-rouge&quot;&gt;hackernews-node&lt;/code&gt; 디렉토리가 셍성되며, &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일이 함께 생성된다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 파일은 Node.js 의 설정 파일이며 각종 의존성을 포함한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-graphql-서버-생성&quot;&gt;2. GraphQL 서버 생성&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;우리가 생성항 GraphQL 서버의 &lt;code class=&quot;highlighter-rouge&quot;&gt;entry point&lt;/code&gt;를 생성하기 위해, 다음과 같은 명령어를 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ../hackernews-node/&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;src
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;src/index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;진입할 부분을 만들었으니,  GraphQL 서버에 의존성을 추가하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-yoga&lt;/code&gt;를 설치한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;graphql-yoga
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-yoga&lt;/code&gt;은 Express.js 및 기타라이브러리를 기반으로하여 만들어 졌으며, 바로 배포가 가능한 정도의 서버를 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/index.js&lt;/code&gt;에 코드를 작성하자.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GraphQLServer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;graphql-yoga&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeDefs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
type Query {
  info: String!
}
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;This is the API of a Hackernews Clone&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GraphQLServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;typeDefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;서버가 작동중입니다.. http://localhost:5000&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeDefs&lt;/code&gt;는 GraphQL의 &lt;code class=&quot;highlighter-rouge&quot;&gt;스키마&lt;/code&gt;를 정의한다. 여기서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Query&lt;/code&gt;를 정의했고, &lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt;라는 필드를 가지며, &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 타입이고 null일 수 없다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resolvers&lt;/code&gt; 객체들은 실제로 스키마를 구현한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-yoga&lt;/code&gt;로 구현된 GraphQL 서버에 해당 값들이 전달된다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-graphql-서버-테스트&quot;&gt;3. GraphQL 서버 테스트&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;아래의 명령을 통해 서버를 실행한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ../hackernews-node/&lt;/span&gt;
node src/index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 위의 방법대로 하면 매번 수정사항이 생길 때마다, 실행해줘야 하므로 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;nodemon&lt;/code&gt;을 활용한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodemon &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;
nodemon src/index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 명령을 통해 실행된 서버로 접속해보면, 다음과 같이 GraphQL Playground를 볼 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL Playground&lt;/code&gt;는 직접 API를 사용하며 기능을 볼 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;IDE&lt;/code&gt;이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/GraphQL/graphql_1_1.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;GraphQL Playground&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DOCS&lt;/code&gt;를 누르면 스키마에 정의된 모든 API 동작과 데이터 타입이 적혀있다.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/GraphQL/graphql_1_2.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;GraphQL Playground - DOCS&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;또한, &lt;code class=&quot;highlighter-rouge&quot;&gt;SCHEMA&lt;/code&gt;를 누르면 정의된 스키마를 볼 수 있다.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/GraphQL/graphql_1_3.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;GraphQL Playground - SCHEMA&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;이제 드디어 첫 쿼리를 전송해보자. 다음의 명령을 왼쪽 에디터 페이지에 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/GraphQL/graphql_1_4.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;GraphQL Playground - first Query&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;만약 여기서 resolver를 다음과 같이 변경하여, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 값을 반환하게 한다면 에러가 나오게 된다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 스키마에 정의된 바와 맞지 않으므로, 에러 발생&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이로써 기본적인 GraphQL의 실행 방법을 알아보았다. 다음에는 간단한 쿼리를 작성해보자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="GraphQL" /><summary type="html">들어가기 앞서 여태것 개념적으로 GraphQL이 무엇인지에 대하여 알아보았다. 그러나 현실은 이상과 다른법.. 이제 실제 코드로 구현하는 방법을 알아볼 차례다.</summary></entry><entry><title type="html">[GraphQL] GraphQL GraphQL의 구성요소</title><link href="https://owin2828.github.io/devlog/2020/11/13/GraphQL-2.html" rel="alternate" type="text/html" title="[GraphQL] GraphQL GraphQL의 구성요소" /><published>2020-11-13T16:49:00+09:00</published><updated>2020-11-13T16:49:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/13/GraphQL-2</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/13/GraphQL-2.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;p&gt;저번 포스팅에 이어, &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;에 대해 알아보고자 한다. 실제 &lt;code class=&quot;highlighter-rouge&quot;&gt;구성요소&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;구현&lt;/code&gt; 방법등에 대하여 서술할 예정이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-graphql의-구성요소&quot;&gt;1. GraphQL의 구성요소&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;GraphQL는 크게 다음과 같은 구성 요소로 이루어져 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;쿼리/뮤테이션(query/mutation)&lt;/li&gt;
  &lt;li&gt;스키마/타입(schema/type)&lt;/li&gt;
  &lt;li&gt;리졸버(resolver)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1-1-쿼리뮤테이션querymutation&quot;&gt;1-1. 쿼리/뮤테이션(query/mutation)&lt;/h4&gt;
&lt;p&gt;GraphQL에서는 요청을 보내는 방법을 2가지로 정의하는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;쿼리&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;뮤테이션&lt;/code&gt;이다. 이 둘은 다른것 같지만, 실상은 별 차이가 없다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;쿼리&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;조회(R)&lt;/code&gt;에 사용되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;뮤테이션&lt;/code&gt;은 데이터의 &lt;code class=&quot;highlighter-rouge&quot;&gt;변조(CUD)&lt;/code&gt;에 사용되는 개념적인 규약이다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 쿼리를 통한 데이터 조회&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 단순한 조회 작업&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 인자를 통한 조회&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroNameAndFriends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$episode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Episode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;episode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$episode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;friends&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mutation을 통한 데이터 변조&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateReviewForEpisode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$ep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Episode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$review&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReviewInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;createReview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;episode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$ep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$review&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stars&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;commentary&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-2-스키마타입schematype&quot;&gt;1-2. 스키마/타입(schema/type)&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://tech.kakao.com/2019/08/01/graphql-basic/&quot;&gt;카카오 기술블로그&lt;/a&gt;에는 다음과 같은 설명이 첨부되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;데이터베이스 스키마(Schema)를 작성할 때의 경험을 SQL 쿼리 작성으로 비유한다면, gql 스키마를 작성할 때의 경험은 C, C++의 &lt;code class=&quot;highlighter-rouge&quot;&gt;헤더파일&lt;/code&gt; 작성에 비유가 됩니다.&lt;br /&gt;
그러므로, 프로그래밍언어(C, C++, JAVA등)에 익숙한 프로그래머라면 스키마 정의 또한 쉽게 배우실 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;스키마&lt;/code&gt;라는 것은 GraphQL에서 사용될 객체 타입을 사전에 지정하는 작업으로써 다음과 같은 형식을 지닌다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Character&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;appearsIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Episode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트 타입 : Character&lt;/li&gt;
  &lt;li&gt;필드 : name, appearsIn&lt;/li&gt;
  &lt;li&gt;스칼라 타입 : String, ID, Int 등&lt;/li&gt;
  &lt;li&gt;느낌표(!) : 필수 값을 의미(non-nullable)&lt;/li&gt;
  &lt;li&gt;대괄호([, ]) : 배열을 의미(array)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-3-리졸버resolver&quot;&gt;1-3. 리졸버(Resolver)&lt;/h4&gt;
&lt;p&gt;데이터베이스에는 데이터베이스 어플리케이션을 사용하여 데이터를 가져오는 &lt;code class=&quot;highlighter-rouge&quot;&gt;구체적인 과정&lt;/code&gt;이 구현되어 있다.&lt;br /&gt;
그러나 GraphQL에서는 데이터를 가져오는 구제적인 과정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;직접 구현&lt;/code&gt;해야 하며 이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;리졸버(Resolver)&lt;/code&gt;가 담당하게 된다.&lt;br /&gt;
이를 통해 데이터베이스뿐 아니라, 일반 파일 및 http SOAP 같은 네트워크 프로토콜을 활용하여 원격 데이터를 가져올 수 있다.&lt;/p&gt;

&lt;p&gt;GraphQL에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;각 필드마다 하나의 함수&lt;/code&gt;가 존재하게 되고, 이 함수는 다음 타입을 반환하게 되며 이 각 함수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;리졸버&lt;/code&gt;라 부른다.&lt;br /&gt;
필드가 스칼라 값(String, Int 같은 primtive 타입)인 경우에는 연쇄 호출이 중지되고, 종료된다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Limit&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;paymentsByUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;위와 같은 코드에서 User와 Limit는 1:1, User와 Payment는 1:N의 관계이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이때 다음과 같은 동일한 쿼리명을 가진 2가지 쿼리를 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 쿼리1. 필드값 2개&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;paymentsByUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 쿼리2. 필드값 3개&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;paymentsByUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;phoneNumber&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 때 필드 1개당 리졸버 함수 1개가 불리게 되므로, 밑의 쿼리가 &lt;code class=&quot;highlighter-rouge&quot;&gt;더 많은&lt;/code&gt; 함수를 호출하게 된다.&lt;br /&gt;
또한 각각의 리졸버 함수는 내부적으로 데이터베이스 쿼리가 존재하게 되는데, 이 두가지를 조합하면 다음과 같은 사실을 알 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;쿼리에 맞게 &lt;code class=&quot;highlighter-rouge&quot;&gt;필요한만큼만&lt;/code&gt; 최적화하여 호출 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉 기존의 RESTful API는 정해진 쿼리가 무조건 호출됨에 비해, 리졸버 체인을 잘 활용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;효율적인 설계&lt;/code&gt;를 할 수 있다는 뜻이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-graphql-비지니스-로직&quot;&gt;2. GraphQL 비지니스 로직&lt;/h2&gt;
&lt;hr /&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/web/web_14_1.png&quot; alt=&quot;&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;비지니스 로직 레이어(출처: https://graphql.github.io/learn/thinking-in-graphs/)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;GraphQL을 이용하여 비지니스 로직을 작성할 때, 실제 로직은 리졸버 함수에 담지 &lt;code class=&quot;highlighter-rouge&quot;&gt;않는다&lt;/code&gt;.&lt;br /&gt;
유효성 검사 및 권한 확인과 실제 로직은 전부 &lt;code class=&quot;highlighter-rouge&quot;&gt;전용 비지니스 로직 레이어&lt;/code&gt; 내부에 담게 된다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;requestPaymentSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;pgId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;birthDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 실제 로직은 비지니스 레이어로&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestPaymentSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pgId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;birthDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;requestPaymentApprove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sessionKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authNumber&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 실제 로직은 비지니스 레이어로&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestApprovePayment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sessionKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이로써 기본적인 GraphQL의 &lt;code class=&quot;highlighter-rouge&quot;&gt;구성&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;구현&lt;/code&gt; 방법에 대하여 알아보았다.&lt;br /&gt;
물론 실제로 코드에 위의 개념을 녹이는 것은 완전 다른 이야기지만..&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;refernece&quot;&gt;Refernece&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql-kr.github.io/learn/&quot;&gt;GraphQL Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.kakao.com/2019/08/01/graphql-basic/&quot;&gt;카카오기술블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="GraphQL" /><summary type="html">들어가기 앞서 저번 포스팅에 이어, GraphQL에 대해 알아보고자 한다. 실제 구성요소와 구현 방법등에 대하여 서술할 예정이다.</summary></entry><entry><title type="html">[GraphQL] GraphQL 특징 및 장,단점</title><link href="https://owin2828.github.io/devlog/2020/11/12/GraphQL-1.html" rel="alternate" type="text/html" title="[GraphQL] GraphQL 특징 및 장,단점" /><published>2020-11-12T12:30:00+09:00</published><updated>2020-11-12T12:30:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/12/GraphQL-1</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/12/GraphQL-1.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;에 대하여 얘기는 많이 들었지만, 한 번도 써본적이 없어 이 참에 해보려 한다.&lt;br /&gt;
GraphQL을 정확하게 이해하기 전에는 그저 새로운 프레임워크, 라이브러리정도로 생각했으나, 전혀 &lt;code class=&quot;highlighter-rouge&quot;&gt;새로운&lt;/code&gt; 개념이라는 것을 알게 되었다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;의 기본에 대한 포스팅은 2회에 걸쳐 진행할 예정인데, 이론적인 부분과 실제로 구성되어 있는 것들을 살펴 보고자 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-graphql이란&quot;&gt;1. GraphQL이란?&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;처음에 이름을 들었을 때, 맨 처음든 생각은 왜 &lt;code class=&quot;highlighter-rouge&quot;&gt;그래프&lt;/code&gt;라는 단어가 들어갔을까 라는 점이다.&lt;br /&gt;
해당 의문에 대한 답은 &lt;a href=&quot;https://graphql-kr.github.io/learn/thinking-in-graphs/&quot;&gt;GraphQL 홈페이지&lt;/a&gt;에서 확인할 수 있었는데, 다음과 같이 서술되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;GraphQL을 사용하면 비즈니스 도메인을 &lt;code class=&quot;highlighter-rouge&quot;&gt;그래프&lt;/code&gt;로 모델링 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스키마를 정의하여 비즈니스 도메인을 그래프로 연결할 수 있다는 말인데, 구조를 알기 전까지는 이해하기 어려운 문장이다.&lt;br /&gt;
한 문장으로만 요약하자면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Facebook이 개발한 Query언어&lt;/code&gt; 라고 할 수 있겠다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-1-기존-rest-api-통신의-한계&quot;&gt;1-1. 기존 REST API 통신의 한계&lt;/h4&gt;
&lt;p&gt;사내에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;REST API&lt;/code&gt; 서버를 구축하며 재미있고, 즐거우며 Front-end 개발자와 협업 하는 것이 굉장이 용이하다는 생각을 하였다.&lt;br /&gt;
그러나 개발하는 서비스의 덩치가 점점 커지며 다음과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;문제점&lt;/code&gt;들에 당면하게 되었는데 생각보다 나를 괴롭게 만들었다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;특정 기능을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;여러번&lt;/code&gt; API가 호출 됨&lt;/li&gt;
  &lt;li&gt;특정 요청에 fit한 응답을 돌려주기 위해서는 API를 &lt;code class=&quot;highlighter-rouge&quot;&gt;새로&lt;/code&gt; 만들어야함&lt;/li&gt;
  &lt;li&gt;API &lt;code class=&quot;highlighter-rouge&quot;&gt;유지보수&lt;/code&gt;의 어려움&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;한 문장으로 요약하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;관리해야 할 EndPoint&lt;/code&gt;의 증가로 인하여 발생되는 문제점이라 할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-2-graphql의-특징&quot;&gt;1-2. GraphQL의 특징&lt;/h4&gt;
&lt;p&gt;GraphQL의 가장 큰 특징은 다음 그림과 같이 EndPoin가 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나&lt;/code&gt; 라는 점이다.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/web/web_13_1.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;REST API와 GraphQL API의 사용(출처 : https://blog.apollographql.com/graphql-vs-rest-5d425123e34b)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;기존에 REST API에서는 정보를 얻기 위해 여러번 네트워크를 호출하거나, 다양한 API를 호출해야 했다.&lt;br /&gt;
하지만 GraphQL은 단 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나&lt;/code&gt;의 Endpoint를 제공하며, 단 &lt;code class=&quot;highlighter-rouge&quot;&gt;한 번&lt;/code&gt;의 요청으로 모든 정보를 가져온다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-3-graphql의-통신-방법&quot;&gt;1-3. GraphQL의 통신 방법&lt;/h4&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/web/web_13_2.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;HTTP와 gql의 기술 스택 비교(출처 : https://tech.kakao.com/2019/08/01/graphql-basic/)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;위의 그림과 같이 Cient-side와 Server-side에서 각각 모듈을 활용하여 통신을 주고 받을 수 있으며, 다음과 같은 언어를 지원한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
  &lt;li&gt;Pyhton&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;C#&lt;/li&gt;
  &lt;li&gt;Scala&lt;/li&gt;
  &lt;li&gt;Go&lt;/li&gt;
  &lt;li&gt;PHP&lt;/li&gt;
  &lt;li&gt;Swift&lt;/li&gt;
  &lt;li&gt;R&lt;/li&gt;
  &lt;li&gt;Kotlin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한, Client-side에서 지원되는 라이브러리는 다음과 같이 2가지 종류가 존재하나, 글을 쓰는 현재(2020년11월)에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Apollo&lt;/code&gt;가 대세이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://relay.dev/&quot;&gt;Relay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/&quot;&gt;Apollo GraphQL&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-4-graphql을-사용하는-기업&quot;&gt;1-4. GraphQL을 사용하는 기업&lt;/h4&gt;
&lt;p&gt;이러한 매력적인 장점을 제공함에도, 여전히 GraphQL을 기반으로 OpenAPI를 제공하는 회사는 거의 없는 것 같다.&lt;br /&gt;
GraphQL 홈페이지에 들어가면 현재 GraphQL을 사용하는 기업들의 목록이 나와있는데, 다음과 같은 기업들이 함께한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.github.com/v4/&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pinterest.co.kr/&quot;&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.intuit.com/&quot;&gt;Intuit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/&quot;&gt;Coursera&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shopify.com/&quot;&gt;Shopify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 중, &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt;은 API v3에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;REST&lt;/code&gt;를 사용하다가 v4에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;로 갈아탔는데, 위 링크의 글을 읽어보면 조금 더 GraphQL의 장점을 알 수 있다.&lt;br /&gt;
또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Explorer&lt;/code&gt;에서 GraphQL을 사용해볼 수 있도록 지원을 하는데, 로그인 이후 본인 계정의 정보를 조회해볼 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://developer.github.com/v4/explorer/&quot;&gt;Github v4 Explorer&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-graphql의-장점&quot;&gt;2. GraphQL의 장점&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;GraphQL은 위에서 언급한 특징을 기반으로 다음과 같은 장점을 지닌다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-1-하나의-endpoint&quot;&gt;2-1. 하나의 Endpoint&lt;/h4&gt;
&lt;p&gt;단 &lt;code class=&quot;highlighter-rouge&quot;&gt;한 개&lt;/code&gt;의 Endpoint를 지님으로써, API나 View를 따로 구성할 필요가 없어진다.&lt;br /&gt;
요청을 보낼때는 정해진 한 군데로만 요청을 보내면 되고, 그 외의 API를 신경쓸 필요가 없어져, 유지보수가 용이해진다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-2-fit한-data&quot;&gt;2-2. Fit한 Data&lt;/h4&gt;
&lt;p&gt;GraphQL은 한번의 요청으로 원하는 모든 데이터를 서버로부터 요청하여 가져온다.&lt;br /&gt;
따라서 기존에 REST API만을 사용할때 발생하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Overfetching&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;Underfetching&lt;/code&gt;등의 문제가 발생하지 않는다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Overfetching&lt;/code&gt;&lt;br /&gt;
원하는 data 이상의 정보를 요청받는 것, data의 정제에 리소스가 낭비&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Underfetching&lt;/code&gt;&lt;br /&gt;
원하는 data의 정보를 요청받기 위해 여러번 요청을 보내는 것, 네트워크를 통해 여러번 접근을 하여 리소스 낭비&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-3-기종에-상관없는-api&quot;&gt;2-3. 기종에 상관없는 API&lt;/h4&gt;
&lt;p&gt;Facebook의 &lt;a href=&quot;https://graphql.org/blog/graphql-a-query-language/&quot;&gt;GraphQL blog&lt;/a&gt;에서는 iOS, Android에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;다른 기종&lt;/code&gt;을 위해 제공하는 API 구현이 힘들었다고 한다.&lt;br /&gt;
RESTful API로는 일일히 다른 기종을 위해 API를 구현해야 했다고 말하며, &lt;code class=&quot;highlighter-rouge&quot;&gt;표준화&lt;/code&gt;된 쿼리언어를 개발했다고 한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-4-redux를-대체할-apollo&quot;&gt;2-4. Redux를 대체할 Apollo&lt;/h4&gt;
&lt;p&gt;React와 함께 사용하는 어플리케이션에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux 아키텍처&lt;/code&gt;를 구현한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt;를 제공하는데, 이는 다음과 같은 방식으로 진행된다.&lt;/p&gt;

&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/web/web_13_3.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;Redux와 Universal Router를 사용한 SSR의 프로세스를 나타낸 도식(출처 : https://d2.naver.com/helloworld/2838729)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;기존의 Redux와 Universal Router를 사용한 SSR은 위의 사진처럼 실행되고 이는 다음과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt;을 야기한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;리소스를 가져오는 로직과 API를 &lt;code class=&quot;highlighter-rouge&quot;&gt;라우팅 경로마다&lt;/code&gt; 구현해야 함&lt;/li&gt;
  &lt;li&gt;Redux의 스토어를 사용하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;액션과 리듀서&lt;/code&gt;를 구현해야 함&lt;/li&gt;
  &lt;li&gt;렌더링 절차가 &lt;code class=&quot;highlighter-rouge&quot;&gt;복잡&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;렌더링에 필요한 모든 리소스를 받을 때까지 렌더링을 실행할 수 &lt;code class=&quot;highlighter-rouge&quot;&gt;없음&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Apollo&lt;/code&gt; 기반의 서비스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;React Router v4&lt;/code&gt; 라이브러리를 사용하여 다음과 같이 진행할 수 있게 된다.&lt;/p&gt;

&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/web/web_13_4.png&quot; alt=&quot;&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
  &lt;figcaption&gt;Apollo와 React Router v4를 사용한 SSR의 프로세스를 나타낸 도식(출처 : https://d2.naver.com/helloworld/2838729)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;React Router v4에서 라우팅 경로에 맞는 컴포넌트를 랜더링&lt;/li&gt;
  &lt;li&gt;컴포넌트를 렌더링할 때 Apollo Client를 통해 컴포넌트 렌더링에 필요한 리소스를 받은 후 HTML 코드로 변환&lt;/li&gt;
  &lt;li&gt;서버에서 받은 HTML 코드로 클라이언트 렌더링을 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Redux와 Universal Router를 사용할 때보다 프로세스가 &lt;code class=&quot;highlighter-rouge&quot;&gt;간결&lt;/code&gt;해졌다.&lt;br /&gt;
또한 Redux와 Universal Router 조합에서 생겨난 단점이 보완되고 다음과 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt;이 추가되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;라우팅 경로에 &lt;code class=&quot;highlighter-rouge&quot;&gt;상관없이&lt;/code&gt; 컴포넌트별로 필요한 리소스만 가져올 수 있음&lt;/li&gt;
  &lt;li&gt;리소스를 가져오는 데 시간이 오래 걸리는 컴포넌트는 리소스를 가져오지 않고 렌더링만 실행하고, 클라이언트 렌더링을 실행할 때 리소스를 가져오게 할 수 있음&lt;/li&gt;
  &lt;li&gt;라우팅 경로에 의존성이 사라져서 &lt;code class=&quot;highlighter-rouge&quot;&gt;재사용&lt;/code&gt; 가능한 컴포넌트의 개발이 용이해짐&lt;/li&gt;
  &lt;li&gt;내부의 분기가 없는 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나의 라우터 코드&lt;/code&gt;로 클라이언트 렌더링과 서버 렌더링을 실행할 수 있음&lt;/li&gt;
  &lt;li&gt;별도의 액션과 리듀서가 없어도 필요한 리소스를 컴포넌트에서 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 내용은 &lt;a href=&quot;https://d2.naver.com/helloworld/2838729&quot;&gt;https://d2.naver.com/helloworld/2838729&lt;/a&gt;의 글을 참조한 부분이며, Redux에 대한 지식이 부족하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;원문 그대로&lt;/code&gt;의 내용을 들고 왔습니다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-graphql의-단점&quot;&gt;3. GraphQL의 단점&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;GraphQL의 단점으로 알려진 것들로는 다음과 같은 특징이 있다.&lt;/p&gt;

&lt;h4 id=&quot;3-1-http-캐싱&quot;&gt;3-1. HTTP 캐싱&lt;/h4&gt;
&lt;p&gt;HTTP의 캐싱 전략은 각각 URL에 각자의 정책을 설정하는 방식으로 이루어 지는데, RESTful API는 이를 그대로 사용이 가능하다.&lt;br /&gt;
그러나 GraphQL은 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나&lt;/code&gt;의 URL로 처리하기에, HTTP에서 제공하는 캐싱 전략을 그대로 사용하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;불가능&lt;/code&gt;하다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL만의 캐싱 방법&lt;/code&gt;을 제공하게 되는데, 대표적으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;영속쿼리(persisted query)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;아폴로엔진(Apollo Engine)&lt;/code&gt;등이 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-2-파일-업로드&quot;&gt;3-2. 파일 업로드&lt;/h4&gt;
&lt;p&gt;GraphQL은 지속적으로 성장하는 생태계로써, 완성된 명세가 &lt;code class=&quot;highlighter-rouge&quot;&gt;존재하지 않는다&lt;/code&gt;. 따라서 이 외의 것들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;직접&lt;/code&gt; 개발할 수 밖에 없게 된다.&lt;br /&gt;
대표적인 예로 파일업로드가 있는데, 다만 이에 대해 몇가지 대안이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Base64 인코딩을 사용&lt;/li&gt;
  &lt;li&gt;Upload를 위해 분리된 API 사용&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jaydenseric/graphql-upload&quot;&gt;apollo-upload-server&lt;/a&gt; 같이 &lt;a href=&quot;https://github.com/jaydenseric/graphql-multipart-request-spec&quot;&gt;GraphQL multipart 요청 명세&lt;/a&gt;를 구현하는 라이브러리를 사용&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-3-요청-필터링의-어려움&quot;&gt;3-3. 요청 필터링의 어려움&lt;/h4&gt;
&lt;p&gt;GraphQL은 클라이언트가 필요한 데이터를 스스로 결정하여 요청하게 된다.&lt;br /&gt;
따라서 GraphQL의 다양한 요청형태에서 잘못된 요청을 필터링하기가 &lt;code class=&quot;highlighter-rouge&quot;&gt;까다롭다&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;GraphQL을 공부하며 GraphQL이 무엇인지 특징 및 장점에 대해 알아보았다.&lt;br /&gt;
다음 포스팅에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL의 구조&lt;/code&gt;에 대해 알아볼 예정이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;refernece&quot;&gt;Refernece&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql-kr.github.io/learn/&quot;&gt;GraphQL Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.kakao.com/2019/08/01/graphql-basic/&quot;&gt;카카오기술블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/2838729&quot;&gt;네이버기술블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bangseongbeom.com/graphql-downsides-alternatives.html&quot;&gt;방성범님블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="GraphQL" /><summary type="html">들어가기 앞서 GraphQL에 대하여 얘기는 많이 들었지만, 한 번도 써본적이 없어 이 참에 해보려 한다. GraphQL을 정확하게 이해하기 전에는 그저 새로운 프레임워크, 라이브러리정도로 생각했으나, 전혀 새로운 개념이라는 것을 알게 되었다. GraphQL의 기본에 대한 포스팅은 2회에 걸쳐 진행할 예정인데, 이론적인 부분과 실제로 구성되어 있는 것들을 살펴 보고자 한다.</summary></entry><entry><title type="html">[AsCal(Awsome-Calender)] Toy project의 시작</title><link href="https://owin2828.github.io/devlog/2020/11/12/web-12.html" rel="alternate" type="text/html" title="[AsCal(Awsome-Calender)] Toy project의 시작" /><published>2020-11-12T10:59:00+09:00</published><updated>2020-11-12T10:59:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/12/web-12</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/12/web-12.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;p&gt;최근 연말에 들어서며, 팀 내에서 다양한 &lt;code class=&quot;highlighter-rouge&quot;&gt;스터디&lt;/code&gt;를 진행하고 있다. 
나 또한 참여자로써 무엇을 할까 고민하다가, 팀내 &lt;code class=&quot;highlighter-rouge&quot;&gt;캘린더&lt;/code&gt;를 만들기로 하였다.&lt;br /&gt;
물론 기존에 다양한 방법으로 일정을 보고 있지만, 한 눈에 모아보기가 힘들다는 단점이 있어 토이프로젝트로 진행하려고 한다.&lt;/p&gt;

&lt;p&gt;사내 스터디를 진행하며, 마주치게 될 일들을 기록으로 남긴다.&lt;/p&gt;

&lt;p&gt;토이 프로젝트에 앞서 계획과 일정 그리고 생각하는 Mock-up Page 등을 끄적이고자 한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;물론 절대 이 일정과 계획되로 매끄럽게 되진 않겠지..&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-이름&quot;&gt;1. 이름&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;은 짓기 귀찮아 대충 Awsome-Calender의 앞글자를 따서 &lt;code class=&quot;highlighter-rouge&quot;&gt;AsCal&lt;/code&gt;이라고 명칭했다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-mock-up-page&quot;&gt;2. Mock-up Page&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;다양한 툴을 조사 중에 있으나, 결정되어 만들어지면 올릴 예정&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-techstack&quot;&gt;3. TechStack&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;사실 이번 토이프로젝트의 가장 중요한 부분이자 토이프로젝트의 목적인 기술 Stack은 다음과 같이 꾸릴 예정이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mongo DB&lt;/code&gt; –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLite&lt;/code&gt;로 변경(&lt;code class=&quot;highlighter-rouge&quot;&gt;prsima2&lt;/code&gt;가 이 글을 쓰는 현재(2020.11.12) 아직 몽고를 지원안한다..)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Nodejs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWS&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-schedule&quot;&gt;4. Schedule&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이번 토이프로젝트의 기간은 약 5주에 걸쳐 진행 될 예정으로, 총 3번 정도 다음과 같이 발표를 하게 될 것 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1주차: 환경 구성 및 HelloWorld APP 개발하기&lt;/li&gt;
  &lt;li&gt;2주차: AsCal 기본 기능 및 화면 개발&lt;/li&gt;
  &lt;li&gt;3주차: AsCal 고도화 및 회고&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;사실 위의 기술스택 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;를 잘 모르기 때문에, 좀 삽질을 할 것 같다.  &lt;br /&gt;
특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQL&lt;/code&gt;은 기존에 익숙한 &lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;와는 좀 다르기에 따로 공부를 해봐야겠다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://owin2828.github.io/devlog/2020/11/12/GraphQL-1.html&quot;&gt;GraphQL의 특징 및 장단점&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://owin2828.github.io/devlog/2020/11/13/GraphQL-2.html&quot;&gt;GraphQL의 구성요소&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="web" /><summary type="html">들어가기 앞서 최근 연말에 들어서며, 팀 내에서 다양한 스터디를 진행하고 있다. 나 또한 참여자로써 무엇을 할까 고민하다가, 팀내 캘린더를 만들기로 하였다. 물론 기존에 다양한 방법으로 일정을 보고 있지만, 한 눈에 모아보기가 힘들다는 단점이 있어 토이프로젝트로 진행하려고 한다.</summary></entry><entry><title type="html">[Vue] 뷰 프로젝트 구성</title><link href="https://owin2828.github.io/devlog/2020/11/06/web-11.html" rel="alternate" type="text/html" title="[Vue] 뷰 프로젝트 구성" /><published>2020-11-06T17:31:00+09:00</published><updated>2020-11-06T17:31:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/06/web-11</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/06/web-11.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;p&gt;기존에 작성한 포스팅의 방법으로 화면을 구성하면 대략 다음과 같은 구조를 지니게 된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 컴포넌트&lt;/li&gt;
  &lt;li&gt;페이지를 이동할 라우터&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 위와 같은 구조로 HTML 파일을 구성할 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;가독성 저하&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;한 눈에 구조파악의 어려움&lt;/code&gt;의 단점이 있다.&lt;br /&gt;
따라서, 이를 해결하기 위한 방법을 알아보도록 하자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-싱글-파일-컴포넌트-체계&quot;&gt;1. 싱글 파일 컴포넌트 체계&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이러한 문제를 해결하는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;싱글 파일 컴포넌트(Single File Components)&lt;/code&gt; 체계이다.&lt;br /&gt;
싱글 파일 컴포넌트란, &lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt; 파일로 프로젝트를 구성하는 방식을 의미한다.&lt;br /&gt;
즉, 확장자 .vue 파일 1개는 뷰 어플리케이션을 구성하는 1개의 &lt;code class=&quot;highlighter-rouge&quot;&gt;컴포넌트&lt;/code&gt;와 동일하다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-뷰-cli&quot;&gt;2. 뷰 CLI&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;싱글 파일 컴포넌트를 사용하기 위해서는 .vue 파일을 웹 브라우저가 인식할 수 있도록 변환해주는 다음과 같은 도구가 필요하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;웹팩(Webpack)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;브라우저리파이(Broswerify)&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;웹펙은 웹의 자원(HTML, CSS, 이미지 등)들을 자바스크립트 모듈로 변환해 하나로 묶어 웹성능을 향상시키는 &lt;code class=&quot;highlighter-rouge&quot;&gt;자바스크립트 모듈 번들러&lt;/code&gt;이다. 
브라우저리파이도 웹팩과 유사한 번들러이지만, 웹 자원 압축이나 빌드 자동화 같은 기능은 없다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 모듈 번들러를 사용하지 않고도 편하게 프로젝트를 구성할 수 있도록 뷰에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;CLI(Command Line Interface)&lt;/code&gt;를 제공한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Vue CLI 설치를 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;가 설치되어야 한다.&lt;br /&gt;
Node.js 및  Vue CLI 설치는 본 포스팅에서는 다루지 않는다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-뷰-로더&quot;&gt;3. 뷰 로더&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;뷰 로더(Vue Loader)&lt;/code&gt;는 웹팩에서 지원하는 라이브러리로, .vue 파일의 내용을 웹페이지 형태로 변환해준다.&lt;br /&gt;
즉 각 파일에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 내용이 각 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt;로 인식되도록 변환 작업을 수행한다.&lt;/p&gt;

&lt;p&gt;이와 같은 과정을 통해 최종적으로 다음의 단계로 프로젝트를 구동할 수 있게 된다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;뷰 CLI 설치: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i vue-cli -g&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;프로젝트 생성: &lt;code class=&quot;highlighter-rouge&quot;&gt;vue init webpack-simple&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;관련 라이브러리 설치: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm isntall&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;프로젝트 구동: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run dev&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;뷰 CLI 명령어로는 다음과 같은 종류가 존재&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue init webpack&lt;/code&gt;: 고급 웹팩 기능을 활용한 프로젝트 구성&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue init webpack-simple&lt;/code&gt;: 웹팩 최소 기능을 활용한 프로젝트 구성&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue init browserify&lt;/code&gt;: 고급 브라우저리파이 기능을 활용한 프로젝트 구성&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue init browserify-simple&lt;/code&gt;: 브라우저리파이 최소 기능을 활용한 프로젝트 구성&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue init simple&lt;/code&gt;: 최소 뷰 기능이 포함된 HTML 파일 1개 작성&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue init pwa&lt;/code&gt;: 웹팩기반의 프로그레시브 웹 앱(PWA, Progressive Web App) 기능을 지원&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;p&gt;이로써 기초적인 뷰의 구성 및 프로젝트 구성 방법을 알아보았다. &lt;br /&gt;
백앤드의 개발을 주로 하는 나에게는 낯설고 생소한 개념과 어색함이 아직도 묻어난다.&lt;br /&gt;
얼른 친숙해지기 위해서 실제 어플리케이션을 제작하며 학습한 내용을 더 탄탄하게 다져야겠다.&lt;/p&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="vue" /><summary type="html">들어가기 앞서 기존에 작성한 포스팅의 방법으로 화면을 구성하면 대략 다음과 같은 구조를 지니게 된다. 여러 개의 컴포넌트 페이지를 이동할 라우터</summary></entry><entry><title type="html">[Vue] 뷰 템플릿</title><link href="https://owin2828.github.io/devlog/2020/11/06/web-10.html" rel="alternate" type="text/html" title="[Vue] 뷰 템플릿" /><published>2020-11-06T14:35:00+09:00</published><updated>2020-11-06T14:35:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/11/06/web-10</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/11/06/web-10.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;뷰 템플릿(Vue Template)&lt;/code&gt;은  HTML, CSS등의 마크업 속성과 뷰 인스턴스에서 정의한 데이터 및 로직들을 연결하여 
사용자가 브라우저에서 볼 수 있는 형태의 HTML로 변환해주는 속성으로, 다음과 같이 크게 2가지 방법이 존재한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ES5에서 뷰 인스턴스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; 속성을 이용하는 방법&lt;/li&gt;
  &lt;li&gt;싱글 파일 컴포넌트 체계의 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 코드를 활용&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;템플릿에서 사용하는 뷰의 속성과 문법은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 바인딩&lt;/li&gt;
  &lt;li&gt;자바스크립트 표현식&lt;/li&gt;
  &lt;li&gt;디렉티브&lt;/li&gt;
  &lt;li&gt;이벤트 처리&lt;/li&gt;
  &lt;li&gt;고급 템플릿 기법&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-데이터-바인딩&quot;&gt;1. 데이터 바인딩&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;데이터 바인딩은 HTML 화면 요소를 뷰 인스턴스와 연결하는 것을 의미하며, 주요 문법으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;{ { } }&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt; 속성이 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-1-------콧수염-괄호&quot;&gt;1-1. { { } } - 콧수염 괄호&lt;/h4&gt;
&lt;p&gt;중괄호 2개를 이용하는 방법은 HTML 태그에 연결하는 가장 기본적인 텍스트 삽입 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	{ {message}}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello Vue.js!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 데이터가 변경되어도 값을 바꾸지 않고 싶다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-once&lt;/code&gt; 속성을 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-once&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	{ {message}}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-2-v-bind&quot;&gt;1-2. v-bind&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt;는 아이디, 클래스, 스타일 등의 HTML 속성 값에 뷰 데이터 값을 연결할 때 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;idA&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;아이디 바인딩&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classA&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;클래스 바인딩&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;styleA&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;스타일 바인딩&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;idA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;classA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;styleA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;color: blue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;추가적으로, &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:&lt;/code&gt; 문법을 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;로 간소화 할 수 있다. 그러나 약식문법은 혼동을 야기할 수 있으므로, 기본 문법으로 쓰자.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-자바스크립트-표현식&quot;&gt;2. 자바스크립트 표현식&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;뷰의 템플릿에서도 자바스크립트 표현식을 사용할 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;{ { } }&lt;/code&gt;안에 자바스크립트 표현식을 넣으면 된다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{ { message }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{ { message + &quot;!!!&quot; }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{ { message.split('').reverse().join('') }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello Vue.js!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;출력&lt;br /&gt;
Hello Vue.js!&lt;br /&gt;
Hello Vue.js!!!&lt;br /&gt;
!sj. euV olleH&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그러나 위와 같은 방식에서 다음과 같은 2가지를 주의해야 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;자바스크립트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;선언문&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;분기 구문&lt;/code&gt;은 사용 &lt;code class=&quot;highlighter-rouge&quot;&gt;불가능&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;복잡한 연산은 인스턴스 안에서, 화면에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;간단한&lt;/code&gt; 결과만 표시&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1. --&amp;gt;&lt;/span&gt;
      { { var a = 10; }} &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- X, 선언문은 사용 불가능 --&amp;gt;&lt;/span&gt;
      { { if (true) {return 100} }} &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- X, 분기 구문은 사용 불가능 --&amp;gt;&lt;/span&gt;
      { { true ? 100 : 0 }} &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- O, 삼항 연산자로 표현 가능 --&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 2. --&amp;gt;&lt;/span&gt;
      { { message.split('').reverse().join('') }} &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- X, 복잡한 연산은 인스턴스 안에서 수행 --&amp;gt;&lt;/span&gt;
      { { reversedMessage }} &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- O, 스크립트에서 computed 속성으로 계산 후 최종 값만 표현 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello Vue.js!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;reversedMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;위에서 역순으로 변환하는 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; 속성을 이용해 계산을 한다.&lt;br /&gt;
이러한 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;캐싱&lt;/code&gt; 효과를 제공하여 성능을 높일 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-디렉티브&quot;&gt;3. 디렉티브&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;뷰 디렉티브(Directive)&lt;/code&gt;란 HTML 태그 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;v- 접두사&lt;/code&gt;를 가지는 모든 속성을 의미하며 다음과 같은 종류가 존재한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt;: 지정한 뷰 데이터 값의 참, 거짓 여부에 따라 HTML 태그를 화면에 표시하거나 표시하지 않음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;: 지정한 뷰 데이터의 개수만큼 해당 HTML 태그를 반복 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-show&lt;/code&gt;: 데이터의 진위여부에 따라 표시하거나 표시하지 않음, 실제 태그는 남아있고 화면상으로만 노출하지 않음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt;: 뷰 데이터 - HTML 기본속성 연결&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt;: 화면 요소의 이벤트를 감지하여 처리&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-model&lt;/code&gt;: 폼(form)에서 주로 사용, 폼의 값과 뷰 데이터를 즉시 동기화.&lt;br /&gt;
화면에 입력된 값을 저장하여 서버에 보내거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;와 같은 속성을 사용하여 추가 로직 수행&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-이벤트-처리&quot;&gt;4. 이벤트 처리&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;뷰는 화면에서 발생한 &lt;code class=&quot;highlighter-rouge&quot;&gt;이벤트&lt;/code&gt;를 처리하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; 디렉티브와 &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; 속성을 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clickBtn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;클릭&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 클릭 이벤트 처리 &lt;/span&gt;
    	&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;clickBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 매서드 호풀 시, 인자 값 넘기기 &lt;/span&gt;
    	&lt;span class=&quot;nl&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;clickBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// event 인자를 이용해 화면 요소의 돔 이벤트에 접근 &lt;/span&gt;
    	&lt;span class=&quot;nl&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;clickBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-고급-템플릿-기법&quot;&gt;5. 고급 템플릿 기법&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;고급 템플릿 기법은 데이터 바인딩과 디렉티브 같은 기본적인 문법과 함께 사용하는 유용한 속성이다.&lt;/p&gt;

&lt;h4 id=&quot;5-1-computed-속성&quot;&gt;5-1. computed 속성&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt; 속성은 데이터 연산들을 정의하는 영역으로, 다음과 같은 장점을 지닌다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;data 속성 값의 변화에 따라 자동을 다시 연산&lt;/li&gt;
  &lt;li&gt;캐싱
    &lt;blockquote&gt;
      &lt;p&gt;캐싱의 특징을 정확히 이해하려면, 비슷한 기능을 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; 기능과의 비교가 필요&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;5-2-computed-속성과-methods-속성의-차이점&quot;&gt;5-2. computed 속성과 methods 속성의 차이점&lt;/h4&gt;
&lt;p&gt;가장 큰 차이점은 method 속성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;호출할 때만&lt;/code&gt; 해당 로직이 수행되고, computed 속성은 값의 변경에 따라 자동적으로 수행 된다는 것이다.&lt;br /&gt;
다시 말해, method 속성은 수행할 때마다 연산을 하기에 별도로 값을 저장하지 않는다.&lt;br /&gt;
하지만, computed 속성은 데이터가 변경되지 않는한 이전 값을 캐싱하고 있다가, 반환한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;따라서 복잡한 연산을 반복 수행해서 화면에 나타낼 경우, computed 속성을 이용하는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;효율적&lt;/code&gt;이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;5-3-watch-속성&quot;&gt;5-3. watch 속성&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; 속성은 데이터의 변화를 감지하여 자동으로 특정 로직을 수행한다.&lt;br /&gt;
computed 속성과 비슷하지만, computed 속성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;간단한&lt;/code&gt; 연산을 수행하는 반면에,&lt;br /&gt;
watch 속성은 데이터 호출 처럼 상대적으로 더 많이 소요되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;비동기&lt;/code&gt; 처리에 적합하다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;p&gt;뷰 템플릿에 대하여 간단하게 알아보았다. 다음 포스팅에서는 뷰 프로젝트의 구성에 대해 알아볼 예정이다.&lt;/p&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="vue" /><summary type="html">들어가기 앞서 뷰 템플릿(Vue Template)은 HTML, CSS등의 마크업 속성과 뷰 인스턴스에서 정의한 데이터 및 로직들을 연결하여 사용자가 브라우저에서 볼 수 있는 형태의 HTML로 변환해주는 속성으로, 다음과 같이 크게 2가지 방법이 존재한다. ES5에서 뷰 인스턴스의 template 속성을 이용하는 방법 싱글 파일 컴포넌트 체계의 &amp;lt;template&amp;gt; 코드를 활용</summary></entry><entry><title type="html">[Vue] HTTP 통신</title><link href="https://owin2828.github.io/devlog/2020/10/28/web-9.html" rel="alternate" type="text/html" title="[Vue] HTTP 통신" /><published>2020-10-28T14:15:00+09:00</published><updated>2020-10-28T14:15:00+09:00</updated><id>https://owin2828.github.io/devlog/2020/10/28/web-9</id><content type="html" xml:base="https://owin2828.github.io/devlog/2020/10/28/web-9.html">&lt;h2 id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/h2&gt;
&lt;p&gt;브라우저와 서버간의 통신을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;라는 프로토콜을 통한다. 이때 웹 앱 HTTP 통신의 대표적인 방법으로 jQuery의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ajax&lt;/code&gt;가 있다.&lt;br /&gt;
이는 서버에서 받아온 데이터를 표시할 때 화면 전체를 갱신하지 않고 화면의 일부분만 변경할 수 있게 하는 자바 스크립트의 기법이다.&lt;br /&gt;
뷰에서도 마찬가지로 이를 지원하기 위한 라이브러리로 &lt;code class=&quot;highlighter-rouge&quot;&gt;뷰 리소스&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt;를 지원한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-뷰-리소스&quot;&gt;1. 뷰 리소스&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;뷰 리소스(resource)&lt;/code&gt;는 초기에 지원되는 라이브러리였으나, 2016년 말에 지원이 중단되어 기존에 관리했던 PageKit 팀의 라이브러리로 돌아갔다.&lt;br /&gt;
현재도 계속하여 사용가능하며, CDN을 이용해 라이브러리를 로딩하는 방법과 NPM으로 라이브러리를 설치하는 방법이 있다.&lt;br /&gt;
하지만 뷰의 창시자인 에반이 2016년 말에 지원을 중단하며 대안으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt;가 뷰의 대세를 이루게 되었다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;뷰 리소스는 본 포스팅에서는 다루지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-axios&quot;&gt;2. Axios&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;액시오스(Axios)&lt;/code&gt;는 현재 뷰 커뮤니티에서 가장 많이 사용되는 HTTP 통신 라이브러리이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt; 기반의 API 형식이 다양하게 제공되어 별도의 로직을 구현할 필요 없이 주어진 API로 구현이 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise 기반의 API&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;란 서버에 데이터를 요청하여 받아오는 동작같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;비동기&lt;/code&gt; 로직 처리에 유용한 자바스크립트 객체이다.&lt;br /&gt;
자바스크립트는 단일 스레드로 처리하기에 비동기 동작을 처리하기 위해 promise와 같은 방법을 활용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;액시오스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CDN&lt;/code&gt;을 활용하여 사용할 수 있는데, 다음과 같은 코드를 추가하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;axios API에 대한 자세한 설명은 &lt;a href=&quot;https://github.com/axios/axios#axios-api&quot;&gt;이곳&lt;/a&gt;을 참조&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이를 활용해 간단하게 GET 요청을 보내 데이터를 출력하는 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vue with Axios Sample&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getData&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;프레임워크 목록 가져오기&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/vue@2.5.2/dist/vue.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 액시오스 라이브러리 로딩 --&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;na&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                &lt;span class=&quot;c1&quot;&gt;// 액시오스 GET 요청 API&lt;/span&gt;
						&lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://raw.githubusercontent.com/joshua1988/doit-vuejs/master/data/demo.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
							&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
							&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끝마치며&quot;&gt;끝마치며&lt;/h2&gt;
&lt;p&gt;여기까지 진행하며 간단하게 뷰의 &lt;code class=&quot;highlighter-rouge&quot;&gt;라우터&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 통신에 대해 알아보았다.&lt;br /&gt;
다음 글에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;뷰 템플릿&lt;/code&gt;과 프로젝트 구성에 대해 알아보자.&lt;/p&gt;</content><author><name>owin2828</name></author><category term="devlog" /><category term="vue" /><summary type="html">들어가기 앞서 브라우저와 서버간의 통신을 위해 HTTP라는 프로토콜을 통한다. 이때 웹 앱 HTTP 통신의 대표적인 방법으로 jQuery의 ajax가 있다. 이는 서버에서 받아온 데이터를 표시할 때 화면 전체를 갱신하지 않고 화면의 일부분만 변경할 수 있게 하는 자바 스크립트의 기법이다. 뷰에서도 마찬가지로 이를 지원하기 위한 라이브러리로 뷰 리소스와 axios를 지원한다.</summary></entry></feed>